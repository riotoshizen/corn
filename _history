{"entries":[{"timestamp":1749734928726,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":131,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":49229,"diffs":[[1," "]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":174,"length1":41,"diffs":[[1,"        \"assets.json\"\n"]]},{"start1":203,"length1":31,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]},{"type":"added","filename":"main.py","value":"\n"}]},{"timestamp":1749735444440,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":43328,"length1":80,"diffs":[[1,"        for (const [x, y] of level.boosts ?? []) {\n"]]},{"start1":43632,"length1":82,"diffs":[[1,"        for (const [x, y] of level.boosts ?? []) {\n"]]},{"start1":43810,"length1":79,"diffs":[[1,"        for (const { x, y, text } of level.texts ?? []) {\n"]]},{"start1":44476,"length1":104,"diffs":[[1,"        const hasWall = level.walls?.some(([wx, wy]) => wx === nx && wy === ny) ?? false;\n"]]},{"start1":44892,"length1":109,"diffs":[[1,"        const hasBoost = (level.boosts ?? []).some(([wx, wy]) => wx === nx && wy === ny);\n"]]},{"start1":45578,"length1":147,"diffs":[[1,"            storage.set('nextLevel', Math.min(LEVELS.length, +(storage.get('nextLevel') ?? '0') + 1));\n"]]}]}]},{"timestamp":1749736041172,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":46860,"length1":288,"diffs":[[1,"            document.getElementById('april-next-button')?.addEventListener('click', () => {\n                clickAudio.play();\n                loadLevel(levelIndex + 1);\n            });\n        }\n"]]},{"start1":48735,"length1":710,"diffs":[[1,"    context.lineWidth = 3;\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n    musicAudio.play();\n    document.addEventListener('keydown', onKeyDown);\n    document.addEventListener('touchstart', onTouchStart);\n    document.addEventListener('touchmove', onTouchMove);\n    document.addEventListener('touchend', onTouchEnd);\n    return () => {\n        musicAudio.pause();\n        document.removeEventListener('keydown', onKeyDown);\n        document.removeEventListener('touchstart', onTouchStart);\n        document.removeEventListener('touchmove', onTouchMove);\n        document.removeEventListener('touchend', onTouchEnd);\n    };\n}"]]}]}]},{"timestamp":1749736649746,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":48827,"length1":28,"diffs":[[1,"        context.lineWidth = 3;\n"]]}]}]},{"timestamp":1749736658730,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":156,"diffs":[[1,"import click from '../../assets/click.wav';\nimport corn from './corn.png';\nimport eat from '../../assets/eat.wav';\nimport logo from './logo.png';\nimport music from './music.mp3';\nimport win from '../../assets/win.wav';\nimport { FONT, UI_WHITE } from '../../shared/style.ts';\nimport { canvas, context, overlay, setOverlay } from '../../dom.ts';\nimport { distance } from '../../util.ts';\nimport { setupMusic, setupSoundEffect } from '../../audio.ts';\nimport { setupStorage } from '../../shared/storage.ts';\n"]]},{"start1":1154,"length1":69,"diffs":[[1,"export function april() {\n"]]},{"start1":48827,"length1":652,"diffs":[[1,"     context.lineWidth = 3;\n        context.textAlign = 'center';\n        context.textBaseline = 'middle';\n        musicAudio.play();\n        document.addEventListener('keydown', onKeyDown);\n        document.addEventListener('touchstart', onTouchStart);\n        document.addEventListener('touchmove', onTouchMove);\n        document.addEventListener('touchend', onTouchEnd);\n        return () => {\n            musicAudio.pause();\n            document.removeEventListener('keydown', onKeyDown);\n            document.removeEventListener('touchstart', onTouchStart);\n            document.removeEventListener('touchmove', onTouchMove);\n            document.removeEventListener('touchend', onTouchEnd);\n        };"]]}]}]},{"timestamp":1749737457051,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":805,"length1":46,"diffs":[[1,"import MyNamespace from './path/to/your/file';\n"]]},{"start1":853,"length1":46,"diffs":[[1,""]]},{"start1":874,"length1":19,"diffs":[[1,""]]}]}]},{"timestamp":1749737461160,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":852,"length1":0,"diffs":[[1,"// Then you can call the functions like this:\n"]]}]}]},{"timestamp":1749738083590,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":805,"length1":64,"diffs":[[1,"import MyNamespace from './path/to/myModule';\n"]]}]}]},{"timestamp":1749738083804,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":805,"length1":49,"diffs":[[1,"import MyNamespace from './path/to/myModule'; // Correct import\n"]]},{"start1":870,"length1":79,"diffs":[[1,"MyNamespace.april();\nMyNamespace.may();\n"]]}]}]},{"timestamp":1749738751493,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":854,"length1":0,"diffs":[[1,"\n"]]}]}]},{"timestamp":1749738786284,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":84,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":854,"length1":0,"diffs":[[1,"const april = MyNamespace.april;\nconst may = MyNamespace.may;\n"]]},{"start1":933,"length1":1,"diffs":[[1,""]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":222,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1749734928725,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>","main.ts":" ","README.md":" ","assets.json":"","pxt.json":"{\n    \"name\": \"corn\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1749736784703,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"import click from '../../assets/click.wav';\nimport corn from './corn.png';\nimport eat from '../../assets/eat.wav';\nimport logo from './logo.png';\nimport music from './music.mp3';\nimport win from '../../assets/win.wav';\nimport { FONT, UI_WHITE } from '../../shared/style.ts';\nimport { canvas, context, overlay, setOverlay } from '../../dom.ts';\nimport { distance } from '../../util.ts';\nimport { setupMusic, setupSoundEffect } from '../../audio.ts';\nimport { setupStorage } from '../../shared/storage.ts';\n\ninterface Level {\n    scale: number;\n    start: [number, number];\n    end: [number, number];\n    bites: number;\n    walls?: [number, number][];\n    texts?: { x: number; y: number; text: string }[];\n    boosts?: [number, number][];\n}\n\nnamespace State {\n    export interface Menu {\n        type: 'menu';\n    }\n\n    export interface Play {\n        type: 'play';\n        levelIndex: number;\n        level: Level;\n        position: [number, number];\n        bites: number;\n        undoHistory: { position: [number, number]; directionIndex: number; type: 'wall' | 'boost' }[];\n        levelComplete: boolean;\n    }\n\n    export type Any = Menu | Play;\n}\n\nexport function april() {\n    const BACKGROUND_COLOR = '#0a3209';\n    const BOOST_COLOR = '#0077ff';\n    const CORN_COLOR = '#d5b803';\n    const END_COLOR = '#64e364';\n    const PLAYER_COLOR = '#c83c27';\n\n    const KEYS = ['ArrowUp', 'ArrowRight', 'ArrowDown', 'ArrowLeft'];\n    const ALTERNATE_KEYS = ['w', 'd', 's', 'a'];\n    const DIRECTIONS = [\n        [0, -1],\n        [1, 0],\n        [0, 1],\n        [-1, 0],\n    ];\n    const SWIPE_RADIUS = 50;\n\n    // prettier-ignore\n    const LEVELS: Level[] = [\n        // 1\n        {\n            scale: 9,\n            start: [2, 2],\n            end: [6, 6],\n            bites: 0,\n            texts: [\n                { x: 300, y: 300, text: 'WASD/arrow keys/swipe to move' },\n                { x: 252, y: 168, text: '← Start here' },\n                { x: 348, y: 433, text: 'Go here →' },\n            ],\n        },\n        // 2\n        {\n            scale: 11,\n            start: [1, 9],\n            end: [9, 1],\n            bites: 0,\n            texts: [{ x: 300, y: 300, text: 'Solve the corn maze' }],\n            walls: [[0, 0], [0, 10], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 10], [10, 0], [10, 10], [10, 1], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [2, 0], [2, 10], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 8], [2, 9], [3, 0], [3, 10], [3, 2], [3, 6], [4, 0], [4, 10], [4, 1], [4, 2], [4, 4], [4, 6], [4, 7], [4, 8], [5, 0], [5, 10], [5, 4], [6, 0], [6, 10], [6, 2], [6, 3], [6, 4], [6, 6], [6, 7], [6, 8], [7, 0], [7, 10], [7, 2], [7, 6], [7, 8], [8, 0], [8, 10], [8, 2], [8, 4], [8, 5], [8, 6], [8, 8], [9, 0], [9, 10], [9, 2], [9, 6]],\n        },\n        // 3\n        {\n            scale: 11,\n            start: [2, 5],\n            end: [8, 5],\n            bites: 1,\n            walls: [[0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [2, 3], [2, 4], [2, 6], [2, 7], [3, 3], [3, 4], [3, 6], [3, 7], [4, 3], [4, 4], [4, 6], [4, 7], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [6, 3], [6, 4], [6, 6], [6, 7], [7, 3], [7, 4], [7, 6], [7, 7], [8, 3], [8, 4], [8, 6], [8, 7], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7]],\n            texts: [\n                { x: 451, y: 55, text: '↑ You can eat this many walls' },\n                { x: 360, y: 300, text: '← Eat' },\n            ],\n        },\n        // 4\n        {\n            scale: 11,\n            start: [2, 5],\n            end: [8, 5],\n            bites: 2,\n            walls: [[1, 4], [1, 5], [1, 6], [2, 4], [2, 6], [3, 4], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6], [6, 4], [6, 5], [6, 6], [7, 4], [7, 6], [8, 4], [8, 6], [9, 4], [9, 5], [9, 6]],\n        },\n        // 5\n        {\n            scale: 11,\n            start: [1, 1],\n            end: [9, 9],\n            bites: 11,\n            walls: [[0, 0], [0, 10], [0, 1], [0, 2], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 10], [1, 2], [1, 3], [1, 4], [1, 5], [1, 7], [1, 8], [10, 10], [10, 1], [10, 2], [10, 3], [10, 5], [10, 6], [10, 8], [10, 9], [2, 0], [2, 10], [2, 1], [2, 2], [2, 3], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [3, 0], [3, 10], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 0], [4, 1], [4, 3], [4, 4], [4, 5], [4, 6], [4, 8], [4, 9], [5, 0], [5, 10], [5, 1], [5, 2], [5, 3], [5, 5], [5, 6], [5, 7], [5, 8], [5, 9], [6, 10], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [7, 0], [7, 10], [7, 1], [7, 2], [7, 3], [7, 4], [7, 6], [7, 7], [7, 8], [8, 0], [8, 10], [8, 1], [8, 3], [8, 4], [8, 5], [8, 6], [8, 8], [8, 9], [9, 0], [9, 10], [9, 1], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8]],\n        },\n        // 6\n        {\n            scale: 11,\n            start: [9, 1],\n            end: [1, 9],\n            bites: 6,\n            walls: [[0, 0], [0, 10], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 10], [1, 2], [1, 4], [1, 6], [1, 8], [10, 0], [10, 1], [10, 2], [10, 3], [10, 4], [2, 0], [2, 10], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [3, 0], [3, 10], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 0], [4, 10], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [5, 0], [5, 2], [5, 3], [5, 4], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [7, 0], [7, 2], [7, 3], [7, 4], [8, 0], [8, 2], [8, 3], [8, 4], [9, 0], [9, 2], [9, 3], [9, 4]],\n        },\n        // 7\n        {\n            scale: 15,\n            start: [2, 2],\n            end: [12, 12],\n            bites: 3,\n            walls: [[0, 0], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 12], [1, 13], [1, 14], [1, 4], [1, 7], [10, 0], [10, 10], [10, 11], [10, 12], [10, 13], [10, 14], [10, 2], [10, 4], [10, 6], [10, 7], [10, 8], [10, 9], [11, 0], [11, 10], [11, 14], [11, 2], [11, 4], [11, 6], [12, 0], [12, 10], [12, 14], [12, 2], [12, 4], [12, 5], [12, 6], [12, 7], [12, 8], [13, 0], [13, 10], [13, 14], [13, 4], [13, 8], [14, 0], [14, 10], [14, 11], [14, 12], [14, 13], [14, 14], [14, 1], [14, 2], [14, 3], [14, 4], [14, 5], [14, 6], [14, 7], [14, 8], [14, 9], [2, 0], [2, 10], [2, 14], [2, 6], [2, 7], [2, 8], [2, 9], [3, 0], [3, 10], [3, 11], [3, 12], [3, 14], [3, 4], [3, 5], [3, 6], [4, 0], [4, 10], [4, 12], [4, 13], [4, 14], [4, 1], [4, 3], [4, 4], [4, 6], [4, 7], [4, 8], [5, 0], [5, 10], [5, 12], [5, 14], [5, 3], [5, 8], [5, 9], [6, 0], [6, 10], [6, 12], [6, 14], [6, 2], [6, 3], [6, 5], [6, 6], [6, 7], [6, 8], [7, 0], [7, 10], [7, 12], [7, 14], [7, 1], [7, 2], [7, 5], [7, 8], [8, 0], [8, 10], [8, 11], [8, 12], [8, 14], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [9, 0], [9, 12], [9, 14], [9, 2], [9, 4], [9, 6]],\n        },\n        // 8\n        {\n            scale: 16,\n            start: [6, 8],\n            end: [9, 8],\n            bites: 1,\n            walls: [[0, 0], [0, 14], [0, 15], [0, 1], [0, 7], [1, 0], [1, 10], [1, 11], [1, 12], [1, 14], [1, 15], [1, 1], [1, 2], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [10, 0], [10, 10], [10, 11], [10, 15], [10, 2], [10, 4], [10, 5], [11, 10], [11, 11], [11, 13], [11, 15], [11, 2], [11, 4], [11, 5], [11, 6], [11, 7], [12, 10], [12, 13], [12, 15], [12, 1], [12, 2], [12, 4], [12, 5], [12, 6], [12, 7], [12, 8], [12, 9], [13, 10], [13, 11], [13, 12], [13, 13], [13, 4], [13, 8], [13, 9], [14, 0], [14, 13], [14, 15], [14, 2], [14, 6], [15, 0], [15, 10], [15, 11], [15, 15], [15, 1], [15, 2], [15, 3], [15, 5], [15, 6], [15, 7], [15, 8], [2, 0], [2, 11], [2, 15], [2, 1], [2, 2], [2, 4], [2, 5], [3, 0], [3, 11], [3, 13], [3, 15], [3, 1], [3, 5], [3, 7], [3, 8], [3, 9], [4, 0], [4, 13], [4, 1], [4, 3], [4, 4], [4, 5], [4, 9], [5, 0], [5, 10], [5, 11], [5, 12], [5, 13], [5, 15], [5, 1], [5, 4], [5, 5], [5, 6], [5, 7], [5, 9], [6, 0], [6, 15], [6, 1], [6, 2], [6, 7], [6, 9], [7, 0], [7, 11], [7, 12], [7, 13], [7, 15], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [7, 9], [8, 0], [8, 10], [8, 11], [8, 15], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [9, 0], [9, 10], [9, 11], [9, 13], [9, 14], [9, 15], [9, 2], [9, 4], [9, 9]],\n        },\n        // 9\n        {\n            scale: 21,\n            start: [1, 9],\n            end: [19, 13],\n            bites: 7,\n            walls: [[0, 0], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], [0, 16], [0, 17], [0, 18], [0, 19], [0, 1], [0, 20], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 13], [1, 14], [1, 15], [1, 16], [1, 17], [1, 18], [1, 19], [1, 1], [1, 20], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [10, 0], [10, 10], [10, 11], [10, 12], [10, 13], [10, 14], [10, 15], [10, 16], [10, 17], [10, 18], [10, 19], [10, 1], [10, 20], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [11, 0], [11, 14], [11, 15], [11, 16], [11, 17], [11, 18], [11, 19], [11, 1], [11, 20], [11, 2], [11, 3], [11, 4], [11, 5], [11, 6], [11, 7], [11, 8], [12, 0], [12, 12], [12, 13], [12, 14], [12, 15], [12, 16], [12, 17], [12, 18], [12, 19], [12, 1], [12, 20], [12, 2], [12, 3], [12, 4], [12, 5], [12, 6], [12, 7], [12, 9], [13, 0], [13, 11], [13, 13], [13, 14], [13, 15], [13, 16], [13, 17], [13, 18], [13, 19], [13, 1], [13, 20], [13, 2], [13, 3], [13, 4], [13, 5], [13, 6], [13, 7], [13, 9], [14, 0], [14, 11], [14, 12], [14, 14], [14, 15], [14, 16], [14, 17], [14, 18], [14, 19], [14, 1], [14, 20], [14, 2], [14, 3], [14, 4], [14, 5], [14, 6], [14, 7], [14, 8], [15, 0], [15, 10], [15, 11], [15, 12], [15, 13], [15, 14], [15, 15], [15, 16], [15, 17], [15, 18], [15, 19], [15, 1], [15, 20], [15, 2], [15, 3], [15, 4], [15, 5], [15, 6], [15, 7], [15, 8], [15, 9], [16, 0], [16, 14], [16, 15], [16, 16], [16, 17], [16, 18], [16, 19], [16, 1], [16, 20], [16, 2], [16, 3], [16, 4], [16, 5], [16, 6], [16, 7], [17, 0], [17, 10], [17, 11], [17, 12], [17, 13], [17, 14], [17, 15], [17, 16], [17, 17], [17, 18], [17, 19], [17, 1], [17, 20], [17, 2], [17, 3], [17, 4], [17, 5], [17, 6], [17, 7], [17, 8], [18, 0], [18, 11], [18, 12], [18, 13], [18, 14], [18, 15], [18, 16], [18, 17], [18, 18], [18, 19], [18, 1], [18, 20], [18, 2], [18, 3], [18, 4], [18, 5], [18, 6], [18, 7], [18, 8], [18, 9], [19, 0], [19, 14], [19, 15], [19, 16], [19, 17], [19, 18], [19, 19], [19, 1], [19, 20], [19, 2], [19, 3], [19, 4], [19, 5], [19, 6], [19, 7], [2, 0], [2, 10], [2, 11], [2, 12], [2, 14], [2, 15], [2, 16], [2, 17], [2, 18], [2, 19], [2, 1], [2, 20], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 9], [20, 0], [20, 10], [20, 11], [20, 12], [20, 13], [20, 14], [20, 15], [20, 16], [20, 17], [20, 18], [20, 19], [20, 1], [20, 20], [20, 2], [20, 3], [20, 4], [20, 5], [20, 6], [20, 7], [20, 8], [20, 9], [3, 0], [3, 10], [3, 11], [3, 12], [3, 14], [3, 15], [3, 16], [3, 17], [3, 18], [3, 19], [3, 1], [3, 20], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 9], [4, 0], [4, 10], [4, 11], [4, 12], [4, 14], [4, 15], [4, 16], [4, 17], [4, 18], [4, 19], [4, 1], [4, 20], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 9], [5, 0], [5, 10], [5, 11], [5, 12], [5, 13], [5, 14], [5, 15], [5, 16], [5, 17], [5, 18], [5, 19], [5, 1], [5, 20], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [5, 9], [6, 0], [6, 13], [6, 14], [6, 15], [6, 16], [6, 17], [6, 18], [6, 19], [6, 1], [6, 20], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [7, 0], [7, 10], [7, 11], [7, 12], [7, 14], [7, 15], [7, 16], [7, 17], [7, 18], [7, 19], [7, 1], [7, 20], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 9], [8, 0], [8, 10], [8, 11], [8, 12], [8, 14], [8, 15], [8, 16], [8, 17], [8, 18], [8, 19], [8, 1], [8, 20], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 9], [9, 0], [9, 13], [9, 14], [9, 15], [9, 16], [9, 17], [9, 18], [9, 19], [9, 1], [9, 20], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8]],\n        },\n        // 10\n        {\n            scale: 11,\n            start: [1, 5],\n            end: [9, 5],\n            bites: 2,\n            walls: [[0, 0], [0, 10], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 10], [10, 0], [10, 10], [10, 1], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [2, 0], [2, 10], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [3, 0], [3, 10], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 0], [4, 10], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [5, 0], [5, 10], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [6, 0], [6, 10], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [7, 0], [7, 10], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [8, 0], [8, 10], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [9, 0], [9, 10], [9, 1], [9, 2], [9, 3], [9, 4], [9, 6], [9, 7], [9, 8]],\n            boosts: [[6, 1]],\n        },\n        // 11\n        {\n            scale: 15,\n            start: [7, 7],\n            end: [14, 14],\n            bites: 1,\n            walls: [[10, 11], [10, 12], [10, 13], [10, 14], [10, 2], [10, 3], [11, 10], [11, 11], [11, 12], [11, 13], [11, 14], [11, 2], [11, 3], [11, 4], [11, 5], [11, 6], [11, 7], [11, 8], [11, 9], [12, 10], [12, 11], [12, 12], [12, 13], [12, 14], [12, 2], [12, 3], [12, 4], [12, 5], [12, 6], [12, 7], [12, 8], [12, 9], [13, 10], [13, 11], [13, 12], [13, 13], [13, 14], [13, 9], [14, 10], [14, 11], [14, 12], [14, 13], [14, 9], [2, 10], [2, 11], [2, 12], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 11], [4, 12], [4, 2], [4, 3], [5, 11], [5, 12], [5, 2], [5, 3], [5, 5], [5, 6], [5, 8], [5, 9], [6, 11], [6, 12], [6, 2], [6, 3], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [7, 11], [7, 2], [7, 3], [7, 5], [7, 6], [7, 8], [7, 9], [8, 11], [8, 12], [8, 2], [8, 3], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [9, 11], [9, 12], [9, 13], [9, 14], [9, 2], [9, 3], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9]],\n            boosts: [[7, 1], [10, 7]],\n        },\n        // 12\n        {\n            scale: 15,\n            start: [4, 7],\n            end: [14, 0],\n            bites: 1,\n            walls: [[0, 10], [0, 12], [0, 13], [0, 14], [0, 9], [1, 10], [1, 11], [1, 12], [1, 13], [1, 9], [10, 0], [10, 10], [10, 11], [10, 12], [10, 13], [10, 14], [10, 1], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [11, 0], [11, 10], [11, 11], [11, 13], [11, 14], [11, 1], [11, 2], [11, 3], [11, 4], [11, 5], [11, 6], [11, 7], [11, 8], [11, 9], [12, 0], [12, 11], [12, 12], [12, 13], [12, 14], [12, 1], [12, 2], [12, 3], [12, 4], [12, 5], [12, 6], [12, 7], [12, 8], [12, 9], [13, 0], [13, 10], [13, 11], [13, 12], [13, 13], [13, 1], [13, 2], [13, 3], [13, 4], [13, 5], [13, 6], [13, 7], [13, 8], [13, 9], [14, 10], [14, 11], [14, 13], [14, 14], [14, 1], [14, 2], [14, 3], [14, 4], [14, 5], [14, 6], [14, 7], [14, 8], [14, 9], [2, 10], [2, 11], [2, 12], [2, 13], [2, 14], [2, 9], [3, 11], [3, 12], [3, 13], [3, 14], [3, 9], [4, 10], [4, 11], [4, 12], [4, 13], [4, 14], [4, 9], [5, 10], [5, 11], [5, 12], [5, 13], [5, 9], [6, 0], [6, 10], [6, 11], [6, 12], [6, 13], [6, 14], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [7, 0], [7, 10], [7, 12], [7, 13], [7, 14], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [7, 9], [8, 0], [8, 10], [8, 11], [8, 12], [8, 13], [8, 14], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [9, 0], [9, 10], [9, 11], [9, 12], [9, 13], [9, 1], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9]],\n            boosts: [[0, 11], [1, 14], [11, 12], [12, 10], [13, 14], [14, 12], [3, 10], [5, 14], [7, 11], [9, 14]],\n        },\n        // 13\n        {\n            scale: 21,\n            start: [10, 10],\n            end: [1, 19],\n            bites: 1,\n            walls: [[0, 0], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], [0, 1], [0, 20], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 10], [1, 11], [1, 15], [1, 16], [1, 17], [1, 18], [1, 1], [1, 20], [1, 3], [1, 4], [1, 5], [1, 6], [1, 8], [1, 9], [10, 0], [10, 12], [10, 13], [10, 14], [10, 16], [10, 18], [10, 1], [10, 20], [10, 2], [10, 4], [10, 5], [11, 0], [11, 10], [11, 11], [11, 12], [11, 13], [11, 14], [11, 16], [11, 18], [11, 1], [11, 20], [11, 2], [11, 5], [11, 6], [11, 7], [11, 8], [11, 9], [12, 0], [12, 10], [12, 11], [12, 12], [12, 14], [12, 16], [12, 18], [12, 1], [12, 20], [12, 2], [12, 3], [12, 5], [12, 6], [12, 7], [12, 8], [12, 9], [13, 0], [13, 10], [13, 11], [13, 14], [13, 15], [13, 16], [13, 17], [13, 18], [13, 19], [13, 1], [13, 20], [13, 3], [13, 5], [13, 6], [13, 7], [13, 8], [13, 9], [14, 0], [14, 11], [14, 13], [14, 14], [14, 15], [14, 17], [14, 18], [14, 19], [14, 1], [14, 20], [15, 0], [15, 10], [15, 11], [15, 12], [15, 13], [15, 14], [15, 15], [15, 16], [15, 17], [15, 18], [15, 19], [15, 1], [15, 20], [15, 2], [15, 3], [15, 5], [15, 6], [15, 8], [15, 9], [16, 0], [16, 10], [16, 11], [16, 12], [16, 13], [16, 14], [16, 15], [16, 17], [16, 18], [16, 19], [16, 20], [16, 5], [16, 6], [16, 8], [16, 9], [17, 0], [17, 10], [17, 11], [17, 12], [17, 13], [17, 14], [17, 15], [17, 18], [17, 1], [17, 20], [17, 2], [17, 3], [17, 4], [17, 5], [17, 6], [17, 8], [17, 9], [18, 0], [18, 12], [18, 17], [18, 18], [18, 20], [18, 2], [18, 3], [18, 4], [18, 5], [18, 6], [18, 7], [18, 8], [19, 0], [19, 10], [19, 11], [19, 12], [19, 13], [19, 14], [19, 15], [19, 16], [19, 17], [19, 18], [19, 20], [19, 6], [19, 7], [19, 8], [19, 9], [2, 0], [2, 10], [2, 11], [2, 13], [2, 14], [2, 15], [2, 16], [2, 17], [2, 18], [2, 19], [2, 1], [2, 20], [2, 8], [2, 9], [20, 0], [20, 10], [20, 11], [20, 12], [20, 13], [20, 14], [20, 15], [20, 16], [20, 17], [20, 18], [20, 19], [20, 1], [20, 20], [20, 2], [20, 3], [20, 4], [20, 5], [20, 6], [20, 7], [20, 8], [20, 9], [3, 0], [3, 10], [3, 11], [3, 13], [3, 14], [3, 15], [3, 19], [3, 1], [3, 20], [3, 2], [3, 3], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 0], [4, 10], [4, 11], [4, 12], [4, 13], [4, 14], [4, 15], [4, 17], [4, 19], [4, 1], [4, 20], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [5, 0], [5, 10], [5, 11], [5, 15], [5, 16], [5, 17], [5, 18], [5, 19], [5, 1], [5, 20], [5, 2], [5, 3], [5, 5], [5, 9], [6, 0], [6, 10], [6, 11], [6, 12], [6, 13], [6, 14], [6, 15], [6, 16], [6, 17], [6, 18], [6, 19], [6, 1], [6, 20], [6, 2], [6, 5], [6, 6], [6, 7], [6, 9], [7, 0], [7, 10], [7, 11], [7, 12], [7, 13], [7, 18], [7, 1], [7, 20], [7, 2], [7, 4], [7, 5], [7, 9], [8, 0], [8, 10], [8, 11], [8, 12], [8, 13], [8, 14], [8, 15], [8, 16], [8, 17], [8, 18], [8, 1], [8, 20], [8, 2], [8, 4], [8, 5], [8, 7], [8, 8], [8, 9], [9, 0], [9, 10], [9, 12], [9, 13], [9, 14], [9, 18], [9, 1], [9, 20], [9, 2], [9, 4], [9, 5], [9, 7], [9, 8], [9, 9]],\n            boosts: [[1, 7], [19, 19], [19, 5], [9, 11]],\n        },\n        // 14\n        {\n            scale: 21,\n            start: [9, 10],\n            end: [11, 10],\n            bites: 0,\n            walls: [[1, 10], [1, 11], [1, 12], [1, 13], [1, 14], [1, 15], [1, 16], [1, 17], [1, 18], [1, 19], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [10, 10], [10, 11], [10, 12], [10, 13], [10, 14], [10, 15], [10, 17], [10, 19], [10, 2], [10, 4], [10, 6], [10, 7], [10, 8], [10, 9], [11, 11], [11, 12], [11, 13], [11, 14], [11, 15], [11, 17], [11, 19], [11, 2], [11, 4], [11, 6], [11, 7], [11, 8], [11, 9], [12, 10], [12, 11], [12, 12], [12, 13], [12, 14], [12, 15], [12, 19], [12, 2], [12, 4], [12, 6], [12, 7], [12, 8], [12, 9], [13, 10], [13, 11], [13, 12], [13, 13], [13, 14], [13, 15], [13, 16], [13, 17], [13, 19], [13, 2], [13, 4], [13, 6], [13, 7], [13, 8], [13, 9], [14, 10], [14, 11], [14, 12], [14, 13], [14, 14], [14, 19], [14, 2], [14, 4], [14, 6], [14, 7], [14, 8], [14, 9], [15, 10], [15, 11], [15, 12], [15, 13], [15, 14], [15, 16], [15, 17], [15, 19], [15, 2], [15, 4], [15, 6], [15, 7], [15, 8], [15, 9], [16, 11], [16, 16], [16, 17], [16, 19], [16, 2], [16, 4], [16, 9], [17, 11], [17, 12], [17, 13], [17, 14], [17, 17], [17, 19], [17, 4], [17, 5], [17, 6], [17, 7], [17, 8], [17, 9], [18, 14], [18, 15], [18, 16], [18, 17], [18, 19], [18, 2], [19, 10], [19, 11], [19, 12], [19, 13], [19, 14], [19, 15], [19, 16], [19, 17], [19, 18], [19, 19], [19, 2], [19, 3], [19, 4], [19, 5], [19, 6], [19, 7], [19, 8], [19, 9], [2, 19], [2, 2], [2, 9], [3, 11], [3, 12], [3, 13], [3, 15], [3, 17], [3, 19], [3, 2], [3, 4], [3, 6], [3, 7], [3, 9], [4, 11], [4, 13], [4, 15], [4, 17], [4, 19], [4, 2], [4, 4], [4, 6], [4, 7], [4, 9], [5, 11], [5, 13], [5, 15], [5, 17], [5, 19], [5, 2], [5, 4], [5, 6], [5, 7], [6, 11], [6, 15], [6, 17], [6, 18], [6, 19], [6, 2], [6, 4], [6, 6], [6, 9], [7, 11], [7, 12], [7, 13], [7, 14], [7, 15], [7, 19], [7, 2], [7, 3], [7, 4], [7, 6], [7, 8], [7, 9], [8, 11], [8, 12], [8, 13], [8, 14], [8, 15], [8, 17], [8, 18], [8, 19], [8, 2], [8, 6], [8, 8], [8, 9], [9, 11], [9, 12], [9, 13], [9, 14], [9, 15], [9, 17], [9, 2], [9, 3], [9, 4], [9, 6], [9, 9]],\n            boosts: [[18, 10]],\n        },\n        // 15\n        {\n            scale: 21,\n            start: [10, 10],\n            end: [0, 18],\n            bites: 1,\n            walls: [[0, 0], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], [0, 16], [0, 17], [0, 19], [0, 1], [0, 20], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 10], [1, 11], [1, 12], [1, 13], [1, 14], [1, 15], [1, 16], [1, 17], [1, 18], [1, 19], [1, 1], [1, 20], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [10, 0], [10, 11], [10, 12], [10, 13], [10, 14], [10, 15], [10, 16], [10, 17], [10, 18], [10, 19], [10, 1], [10, 20], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [11, 0], [11, 10], [11, 11], [11, 12], [11, 13], [11, 14], [11, 15], [11, 16], [11, 17], [11, 18], [11, 19], [11, 1], [11, 20], [11, 2], [11, 3], [11, 4], [11, 5], [11, 6], [11, 7], [11, 8], [11, 9], [12, 0], [12, 10], [12, 11], [12, 12], [12, 13], [12, 14], [12, 15], [12, 16], [12, 17], [12, 18], [12, 19], [12, 1], [12, 20], [12, 2], [12, 3], [12, 4], [12, 5], [12, 6], [12, 7], [12, 8], [12, 9], [13, 0], [13, 11], [13, 12], [13, 13], [13, 14], [13, 15], [13, 16], [13, 17], [13, 18], [13, 19], [13, 1], [13, 20], [13, 2], [13, 3], [13, 4], [13, 5], [13, 6], [13, 7], [13, 8], [13, 9], [14, 0], [14, 10], [14, 11], [14, 12], [14, 13], [14, 14], [14, 15], [14, 16], [14, 17], [14, 18], [14, 19], [14, 1], [14, 20], [14, 2], [14, 3], [14, 4], [14, 5], [14, 6], [14, 7], [14, 8], [14, 9], [15, 0], [15, 10], [15, 11], [15, 12], [15, 13], [15, 14], [15, 15], [15, 16], [15, 17], [15, 18], [15, 19], [15, 1], [15, 20], [15, 2], [15, 3], [15, 4], [15, 5], [15, 6], [15, 7], [15, 8], [15, 9], [16, 0], [16, 10], [16, 11], [16, 12], [16, 13], [16, 14], [16, 15], [16, 16], [16, 17], [16, 18], [16, 19], [16, 1], [16, 20], [16, 2], [16, 3], [16, 4], [16, 5], [16, 6], [16, 7], [16, 8], [16, 9], [17, 0], [17, 10], [17, 11], [17, 12], [17, 13], [17, 14], [17, 15], [17, 16], [17, 17], [17, 18], [17, 19], [17, 1], [17, 20], [17, 2], [17, 3], [17, 4], [17, 5], [17, 6], [17, 7], [17, 8], [17, 9], [18, 0], [18, 10], [18, 11], [18, 12], [18, 13], [18, 14], [18, 15], [18, 16], [18, 17], [18, 18], [18, 19], [18, 1], [18, 20], [18, 2], [18, 3], [18, 4], [18, 5], [18, 6], [18, 7], [18, 8], [18, 9], [19, 0], [19, 10], [19, 11], [19, 12], [19, 13], [19, 14], [19, 15], [19, 16], [19, 17], [19, 18], [19, 19], [19, 1], [19, 20], [19, 2], [19, 3], [19, 4], [19, 5], [19, 6], [19, 7], [19, 8], [19, 9], [2, 0], [2, 11], [2, 12], [2, 13], [2, 14], [2, 15], [2, 16], [2, 17], [2, 18], [2, 19], [2, 1], [2, 20], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [20, 0], [20, 12], [20, 13], [20, 14], [20, 15], [20, 16], [20, 17], [20, 18], [20, 19], [20, 1], [20, 20], [20, 2], [20, 3], [20, 4], [20, 5], [20, 6], [20, 7], [20, 8], [3, 0], [3, 11], [3, 12], [3, 13], [3, 14], [3, 15], [3, 16], [3, 17], [3, 18], [3, 19], [3, 1], [3, 20], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 0], [4, 10], [4, 11], [4, 12], [4, 13], [4, 14], [4, 15], [4, 16], [4, 17], [4, 18], [4, 19], [4, 1], [4, 20], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [5, 0], [5, 10], [5, 11], [5, 12], [5, 13], [5, 14], [5, 15], [5, 16], [5, 17], [5, 18], [5, 19], [5, 1], [5, 20], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [5, 9], [6, 0], [6, 10], [6, 11], [6, 12], [6, 13], [6, 14], [6, 15], [6, 16], [6, 17], [6, 18], [6, 19], [6, 1], [6, 20], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [7, 0], [7, 10], [7, 11], [7, 12], [7, 13], [7, 14], [7, 15], [7, 16], [7, 17], [7, 18], [7, 19], [7, 1], [7, 20], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [7, 9], [8, 0], [8, 11], [8, 12], [8, 13], [8, 14], [8, 15], [8, 16], [8, 17], [8, 18], [8, 19], [8, 1], [8, 20], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [9, 0], [9, 10], [9, 11], [9, 12], [9, 13], [9, 14], [9, 15], [9, 16], [9, 17], [9, 18], [9, 19], [9, 1], [9, 20], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9]],\n            boosts: [[13, 10], [2, 10], [20, 10], [20, 11], [20, 9], [3, 10], [8, 10]],\n        },\n        // 16\n        {\n            scale: 25,\n            start: [12, 12],\n            end: [24, 24],\n            bites: 1,\n            walls: [[0, 0], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], [0, 16], [0, 17], [0, 18], [0, 19], [0, 1], [0, 20], [0, 21], [0, 22], [0, 23], [0, 24], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 16], [1, 18], [1, 19], [1, 1], [1, 20], [1, 21], [1, 22], [1, 23], [1, 24], [1, 2], [1, 3], [1, 5], [10, 0], [10, 10], [10, 11], [10, 12], [10, 13], [10, 14], [10, 20], [10, 21], [10, 22], [10, 24], [10, 4], [10, 7], [10, 8], [10, 9], [11, 0], [11, 10], [11, 14], [11, 16], [11, 18], [11, 22], [11, 24], [11, 2], [11, 4], [11, 5], [12, 0], [12, 10], [12, 14], [12, 15], [12, 16], [12, 18], [12, 19], [12, 20], [12, 24], [12, 2], [12, 5], [12, 7], [12, 8], [12, 9], [13, 0], [13, 10], [13, 14], [13, 1], [13, 20], [13, 21], [13, 22], [13, 23], [13, 24], [13, 2], [13, 3], [13, 4], [13, 5], [13, 7], [14, 0], [14, 10], [14, 11], [14, 12], [14, 13], [14, 14], [14, 16], [14, 17], [14, 18], [14, 19], [14, 1], [14, 20], [14, 24], [14, 7], [14, 9], [15, 0], [15, 12], [15, 1], [15, 22], [15, 24], [15, 3], [15, 4], [15, 5], [15, 6], [15, 7], [16, 0], [16, 10], [16, 11], [16, 12], [16, 14], [16, 15], [16, 16], [16, 17], [16, 18], [16, 1], [16, 20], [16, 21], [16, 22], [16, 24], [16, 6], [16, 9], [17, 0], [17, 14], [17, 18], [17, 1], [17, 22], [17, 23], [17, 24], [17, 3], [17, 4], [17, 5], [17, 6], [17, 7], [17, 9], [18, 0], [18, 11], [18, 12], [18, 13], [18, 14], [18, 16], [18, 17], [18, 18], [18, 1], [18, 20], [18, 22], [18, 23], [18, 24], [18, 3], [18, 7], [18, 8], [18, 9], [19, 0], [19, 11], [19, 14], [19, 18], [19, 19], [19, 20], [19, 21], [19, 22], [19, 23], [19, 24], [19, 3], [19, 5], [19, 8], [2, 0], [2, 10], [2, 11], [2, 12], [2, 13], [2, 14], [2, 18], [2, 1], [2, 23], [2, 24], [2, 3], [2, 5], [2, 7], [2, 8], [2, 9], [20, 0], [20, 11], [20, 13], [20, 14], [20, 16], [20, 1], [20, 20], [20, 21], [20, 22], [20, 23], [20, 24], [20, 3], [20, 5], [20, 6], [20, 8], [20, 9], [21, 0], [21, 11], [21, 16], [21, 17], [21, 18], [21, 19], [21, 1], [21, 20], [21, 21], [21, 22], [21, 23], [21, 24], [21, 3], [21, 6], [22, 0], [22, 10], [22, 11], [22, 13], [22, 14], [22, 19], [22, 1], [22, 20], [22, 21], [22, 22], [22, 23], [22, 24], [22, 3], [22, 5], [22, 6], [22, 7], [22, 8], [22, 9], [23, 0], [23, 14], [23, 15], [23, 16], [23, 17], [23, 18], [23, 19], [23, 1], [23, 20], [23, 21], [23, 22], [23, 23], [23, 24], [23, 2], [23, 3], [24, 0], [24, 10], [24, 11], [24, 12], [24, 13], [24, 14], [24, 15], [24, 16], [24, 17], [24, 18], [24, 19], [24, 1], [24, 20], [24, 21], [24, 22], [24, 23], [24, 2], [24, 3], [24, 4], [24, 5], [24, 6], [24, 7], [24, 8], [24, 9], [3, 0], [3, 12], [3, 16], [3, 17], [3, 18], [3, 1], [3, 20], [3, 21], [3, 22], [3, 23], [3, 24], [3, 3], [3, 5], [3, 7], [4, 0], [4, 10], [4, 12], [4, 14], [4, 16], [4, 18], [4, 1], [4, 20], [4, 24], [4, 5], [4, 7], [4, 8], [4, 9], [5, 0], [5, 10], [5, 12], [5, 14], [5, 18], [5, 1], [5, 20], [5, 22], [5, 24], [5, 2], [5, 3], [6, 0], [6, 10], [6, 12], [6, 14], [6, 15], [6, 16], [6, 17], [6, 18], [6, 20], [6, 22], [6, 24], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [7, 0], [7, 10], [7, 12], [7, 20], [7, 22], [7, 24], [7, 2], [7, 3], [8, 0], [8, 10], [8, 12], [8, 13], [8, 14], [8, 15], [8, 16], [8, 17], [8, 18], [8, 19], [8, 20], [8, 22], [8, 24], [8, 2], [8, 5], [8, 6], [8, 7], [8, 8], [9, 0], [9, 10], [9, 16], [9, 18], [9, 22], [9, 24], [9, 2], [9, 4], [9, 5]],\n            boosts: [[2, 22], [2, 2], [22, 2]],\n        },\n        // 17\n        {\n            scale: 21,\n            start: [0, 20],\n            end: [20, 0],\n            bites: 2,\n            walls: [[0, 11], [0, 13], [0, 15], [0, 17], [0, 19], [0, 1], [0, 3], [0, 5], [0, 7], [0, 9], [1, 0], [1, 10], [1, 12], [1, 14], [1, 16], [1, 18], [1, 20], [1, 2], [1, 4], [1, 6], [1, 8], [10, 11], [10, 13], [10, 15], [10, 17], [10, 19], [10, 1], [10, 3], [10, 5], [10, 7], [10, 9], [11, 0], [11, 10], [11, 12], [11, 14], [11, 16], [11, 18], [11, 20], [11, 2], [11, 4], [11, 6], [11, 8], [12, 11], [12, 13], [12, 15], [12, 17], [12, 19], [12, 1], [12, 3], [12, 5], [12, 7], [12, 9], [13, 0], [13, 10], [13, 12], [13, 14], [13, 16], [13, 18], [13, 20], [13, 2], [13, 4], [13, 6], [13, 8], [14, 11], [14, 13], [14, 15], [14, 17], [14, 19], [14, 1], [14, 3], [14, 5], [14, 7], [14, 9], [15, 0], [15, 10], [15, 12], [15, 14], [15, 16], [15, 18], [15, 20], [15, 2], [15, 4], [15, 6], [15, 8], [16, 11], [16, 13], [16, 15], [16, 17], [16, 19], [16, 1], [16, 3], [16, 5], [16, 7], [16, 9], [17, 0], [17, 10], [17, 12], [17, 14], [17, 16], [17, 18], [17, 20], [17, 2], [17, 4], [17, 6], [17, 8], [18, 11], [18, 13], [18, 15], [18, 17], [18, 19], [18, 1], [18, 3], [18, 5], [18, 7], [18, 9], [19, 0], [19, 10], [19, 12], [19, 14], [19, 16], [19, 18], [19, 20], [19, 2], [19, 4], [19, 6], [19, 8], [2, 11], [2, 13], [2, 15], [2, 17], [2, 19], [2, 1], [2, 3], [2, 5], [2, 7], [2, 9], [20, 11], [20, 13], [20, 15], [20, 17], [20, 19], [20, 1], [20, 3], [20, 5], [20, 7], [20, 9], [3, 0], [3, 10], [3, 12], [3, 14], [3, 16], [3, 18], [3, 20], [3, 2], [3, 4], [3, 6], [3, 8], [4, 11], [4, 13], [4, 15], [4, 17], [4, 19], [4, 1], [4, 3], [4, 5], [4, 7], [4, 9], [5, 0], [5, 10], [5, 12], [5, 14], [5, 16], [5, 18], [5, 20], [5, 2], [5, 4], [5, 6], [5, 8], [6, 11], [6, 13], [6, 15], [6, 17], [6, 19], [6, 1], [6, 3], [6, 5], [6, 7], [6, 9], [7, 0], [7, 10], [7, 12], [7, 14], [7, 16], [7, 18], [7, 20], [7, 2], [7, 4], [7, 6], [7, 8], [8, 11], [8, 13], [8, 15], [8, 17], [8, 19], [8, 1], [8, 3], [8, 5], [8, 7], [8, 9], [9, 0], [9, 10], [9, 12], [9, 14], [9, 16], [9, 18], [9, 20], [9, 2], [9, 4], [9, 6], [9, 8]],\n            boosts: [[0, 10], [1, 15], [1, 3], [14, 14], [14, 20], [15, 7], [20, 10], [20, 18], [3, 19], [5, 7], [7, 3], [8, 12], [8, 18]],\n        },\n        // 18\n        {\n            scale: 25,\n            start: [1, 23],\n            end: [23, 1],\n            bites: 5,\n            walls: [[0, 0], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], [0, 16], [0, 17], [0, 18], [0, 19], [0, 1], [0, 20], [0, 21], [0, 22], [0, 23], [0, 24], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 12], [1, 14], [1, 18], [1, 22], [1, 24], [1, 2], [1, 6], [1, 9], [10, 0], [10, 10], [10, 11], [10, 12], [10, 14], [10, 16], [10, 17], [10, 18], [10, 19], [10, 20], [10, 22], [10, 24], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [11, 0], [11, 10], [11, 12], [11, 14], [11, 16], [11, 18], [11, 20], [11, 22], [11, 23], [11, 24], [11, 2], [11, 4], [11, 6], [12, 0], [12, 10], [12, 12], [12, 14], [12, 15], [12, 16], [12, 18], [12, 1], [12, 20], [12, 21], [12, 22], [12, 24], [12, 2], [12, 3], [12, 4], [12, 6], [12, 7], [12, 8], [13, 0], [13, 10], [13, 11], [13, 12], [13, 14], [13, 18], [13, 21], [13, 24], [13, 4], [13, 8], [13, 9], [14, 0], [14, 10], [14, 12], [14, 14], [14, 15], [14, 16], [14, 17], [14, 18], [14, 19], [14, 20], [14, 21], [14, 22], [14, 23], [14, 24], [14, 2], [14, 3], [14, 4], [14, 5], [14, 6], [14, 7], [14, 8], [15, 0], [15, 10], [15, 12], [15, 14], [15, 16], [15, 20], [15, 22], [15, 24], [15, 2], [15, 4], [15, 6], [16, 0], [16, 10], [16, 11], [16, 12], [16, 13], [16, 14], [16, 16], [16, 17], [16, 18], [16, 19], [16, 1], [16, 20], [16, 22], [16, 24], [16, 2], [16, 3], [16, 4], [16, 6], [16, 7], [16, 8], [16, 9], [17, 0], [17, 10], [17, 14], [17, 16], [17, 20], [17, 22], [17, 24], [17, 2], [17, 4], [17, 6], [18, 0], [18, 10], [18, 11], [18, 12], [18, 13], [18, 14], [18, 15], [18, 16], [18, 18], [18, 19], [18, 20], [18, 22], [18, 24], [18, 2], [18, 4], [18, 5], [18, 6], [18, 7], [18, 8], [19, 0], [19, 10], [19, 14], [19, 16], [19, 19], [19, 22], [19, 24], [19, 2], [19, 4], [19, 8], [2, 0], [2, 10], [2, 12], [2, 14], [2, 15], [2, 16], [2, 17], [2, 18], [2, 19], [2, 20], [2, 22], [2, 23], [2, 24], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [20, 0], [20, 10], [20, 11], [20, 12], [20, 13], [20, 14], [20, 16], [20, 17], [20, 18], [20, 19], [20, 21], [20, 22], [20, 23], [20, 24], [20, 2], [20, 3], [20, 4], [20, 6], [20, 7], [20, 8], [20, 9], [21, 0], [21, 10], [21, 14], [21, 17], [21, 21], [21, 24], [21, 2], [21, 4], [21, 5], [21, 6], [21, 8], [22, 0], [22, 10], [22, 11], [22, 12], [22, 13], [22, 14], [22, 15], [22, 16], [22, 17], [22, 18], [22, 19], [22, 1], [22, 20], [22, 21], [22, 22], [22, 24], [22, 2], [22, 4], [22, 6], [22, 8], [23, 0], [23, 11], [23, 14], [23, 17], [23, 21], [23, 24], [23, 4], [23, 8], [24, 0], [24, 10], [24, 11], [24, 12], [24, 13], [24, 14], [24, 15], [24, 16], [24, 17], [24, 18], [24, 19], [24, 1], [24, 20], [24, 21], [24, 22], [24, 23], [24, 24], [24, 2], [24, 3], [24, 4], [24, 5], [24, 6], [24, 7], [24, 8], [24, 9], [3, 0], [3, 10], [3, 12], [3, 16], [3, 19], [3, 22], [3, 24], [3, 2], [3, 4], [3, 8], [4, 0], [4, 10], [4, 11], [4, 12], [4, 13], [4, 14], [4, 15], [4, 16], [4, 17], [4, 18], [4, 19], [4, 20], [4, 21], [4, 22], [4, 24], [4, 2], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [5, 0], [5, 12], [5, 16], [5, 18], [5, 22], [5, 23], [5, 24], [5, 2], [5, 4], [5, 6], [5, 9], [6, 0], [6, 10], [6, 12], [6, 14], [6, 15], [6, 16], [6, 18], [6, 1], [6, 20], [6, 21], [6, 22], [6, 24], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [7, 0], [7, 10], [7, 12], [7, 14], [7, 16], [7, 18], [7, 20], [7, 22], [7, 24], [7, 4], [7, 7], [8, 0], [8, 10], [8, 11], [8, 12], [8, 13], [8, 14], [8, 15], [8, 16], [8, 17], [8, 18], [8, 19], [8, 20], [8, 22], [8, 23], [8, 24], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [9, 0], [9, 14], [9, 16], [9, 1], [9, 20], [9, 21], [9, 22], [9, 24], [9, 2], [9, 6], [9, 8]],\n            boosts: [[15, 19], [23, 20], [3, 11], [7, 3]],\n        },\n    ];\n\n    const musicAudio = setupMusic(music);\n    const clickAudio = setupSoundEffect(click);\n    const eatAudio = setupSoundEffect(eat);\n    const winAudio = setupSoundEffect(win);\n    const storage = setupStorage('april');\n\n    let drawRequested = false;\n    let state: State.Any = { type: 'menu' };\n    let swipeOrigin: [number, number] | undefined = undefined;\n    let usingKeyboard = false;\n    let cornPattern: string | CanvasPattern = CORN_COLOR;\n\n    // Replace the solid color with the pattern once it's loaded.\n    const CORN_IMAGE = new Image();\n    CORN_IMAGE.src = corn;\n    CORN_IMAGE.addEventListener('load', () => (cornPattern = context.createPattern(CORN_IMAGE, 'repeat')!));\n\n    function reset() {\n        if (state.type !== 'play') return;\n        clickAudio.play();\n        loadLevel(state.levelIndex);\n    }\n\n    function undo() {\n        if (state.type !== 'play') return;\n        const { undoHistory, level } = state as State.Play;\n        if (undoHistory.length === 0) return;\n        clickAudio.play();\n        const { position, directionIndex, type } = undoHistory.pop()!;\n        const [dx, dy] = DIRECTIONS[directionIndex];\n        const nextPosition = [position[0] + dx, position[1] + dy] as [number, number];\n\n        if (type === 'wall') {\n            level.walls!.push(nextPosition);\n            ++(state as State.Play).bites;\n        } else {\n            level.boosts!.push(nextPosition);\n            (state as State.Play).bites -= 3;\n        }\n\n        (state as State.Play).position = position;\n        requestDraw();\n        setLevelOverlay();\n    }\n\n    function resetDisabled() {\n        const { undoHistory, position, levelIndex } = state as State.Play;\n        const [startX, startY] = LEVELS[levelIndex].start;\n        return undoHistory.length === 0 && position[0] === startX && position[1] === startY;\n    }\n\n    function setLevelOverlay() {\n        const { levelIndex, level, bites, undoHistory } = state as State.Play;\n        setOverlay(`\n            <div style=\"display: flex; gap: 5px; margin: 2px 0 0 2px; opacity: 0.8\">\n                <button id=\"april-menu-button\" class=\"light\" style=\"background: ${BACKGROUND_COLOR}\">MENU</button>\n                <button id=\"april-undo-button\" class=\"light\" ${undoHistory.length === 0 ? 'disabled' : `style=\"background: ${BACKGROUND_COLOR}\"`}>UNDO${usingKeyboard ? ' (Z)' : ''}</button>\n                <button id=\"april-reset-button\" class=\"light\" ${resetDisabled() ? 'disabled' : `style=\"background: ${BACKGROUND_COLOR}\"`}>RESET${usingKeyboard ? ' (R)' : ''}</button>\n                <button style=\"background: ${BACKGROUND_COLOR}; cursor: unset\">LVL ${levelIndex + 1} &nbsp•&nbsp ${bites}/${level.bites} 🦷</button>\n            </div>\n        `);\n\n        (document.getElementById('april-menu-button') as HTMLButtonElement).addEventListener('click', () => {\n            clickAudio.play();\n            mainMenu();\n        });\n\n        (document.getElementById('april-undo-button') as HTMLButtonElement).addEventListener('click', undo);\n        (document.getElementById('april-reset-button') as HTMLButtonElement).addEventListener('click', reset);\n    }\n\n    function loadLevel(index: number) {\n        state = {\n            type: 'play',\n            levelIndex: index,\n            level: structuredClone(LEVELS[index]),\n            position: structuredClone(LEVELS[index].start),\n            bites: LEVELS[index].bites,\n            undoHistory: [],\n            levelComplete: false,\n        };\n        setLevelOverlay();\n        requestDraw();\n        window.gtag('event', 'level_start', { level_name: `kornivore-${index + 1}` });\n    }\n\n    function mainMenu() {\n        state = { type: 'menu' };\n        const nextLevel = Number(storage.get('nextLevel') || '0');\n\n        setOverlay(`\n            <div class=\"center\" style=\"display: flex; flex-direction: column; align-items: center; gap: 25px\">\n                <img src=\"${logo}\" alt=\"Kornivore\" width=\"300\">\n                <div style=\"display: flex; flex-direction: column; gap: 25px; align-items: center\">\n                    <div style=\"display: flex; gap: 5px; width: 500px; flex-wrap: wrap; justify-content: center\">\n                        ${LEVELS.map((_, index) => `<button class=\"light\" style=\"width: 70px; height: 35px; ${nextLevel === index ? 'border-width: 5px; border-style: dashed; padding: 0' : ''}\" ${nextLevel < index ? 'disabled' : ''}>${index + 1} ${nextLevel > index ? '🏆' : ''}</button>`).join('')}\n                    </div>\n                </div>\n                <button class=\"link\">Kornivore Music Credits</button>\n            </div>\n        `);\n\n        overlay.querySelectorAll('button').forEach(button =>\n            button.addEventListener('click', () => {\n                clickAudio.play();\n\n                if (button.textContent === 'Kornivore Music Credits') {\n                    setOverlay(`\n                        <div class=\"center\" style=\"display: flex; flex-direction: column; align-items: center; gap: 25px\">\n                            <h1>Kornivore Music Credits</h1>\n                            <table>\n                                <tbody>\n                                    <tr>\n                                        <td><a href=\"https://instagram.com/arieschtruth\" target=\"_blank\" onclick=\"gtag('event', 'visit_external', {url: 'https://instagram.com/arieschtruth'})\">Ari Eschtruth</a></td>\n                                        <td>-</td>\n                                        <td>Composer, Producer</td>\n                                    </tr>\n                                    <tr>\n                                        <td><a href=\"https://instagram.com/alex_golden_sax\" target=\"_blank\" onclick=\"gtag('event', 'visit_external', {url: 'https://instagram.com/alex_golden_sax'})\">Alex Golden</a></td>\n                                        <td>-</td>\n                                        <td>Tenor Saxophone</td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                            <button id=\"april-back-button\">BACK</button>\n                        </div>\n                    `);\n\n                    (document.getElementById('april-back-button') as HTMLButtonElement).addEventListener(\n                        'click',\n                        () => {\n                            clickAudio.play();\n                            mainMenu();\n                        },\n                    );\n\n                    return;\n                }\n\n                loadLevel(parseInt(button.textContent!) - 1);\n            }),\n        );\n\n        requestDraw();\n    }\n\n    function requestDraw() {\n        if (drawRequested) return;\n        requestAnimationFrame(() => {\n            drawRequested = false;\n            draw();\n        });\n    }\n\n    function draw() {\n        context.fillStyle = BACKGROUND_COLOR;\n        context.fillRect(0, 0, canvas.width, canvas.height);\n\n        if (state.type !== 'play') return;\n\n        const { level, position } = state;\n\n        const scale = canvas.width / level.scale;\n\n        const walls = level.walls || [];\n        for (const [x, y] of walls) {\n            context.fillStyle = CORN_COLOR;\n            context.fillRect(x * scale, y * scale, scale * 1.02, scale * 1.02);\n            context.fillStyle = cornPattern;\n            context.fillRect(x * scale, y * scale, scale * 1.02, scale * 1.02);\n        }\n\n        context.strokeStyle = PLAYER_COLOR;\n        context.beginPath();\n        context.arc((level.start[0] + 0.5) * scale, (level.start[1] + 0.5) * scale, 0.35 * scale, 0, Math.PI * 2);\n        context.stroke();\n\n        context.scale(scale, scale);\n\n        context.fillStyle = END_COLOR;\n        context.translate(level.end[0] + 0.5, level.end[1] + 0.5);\n        context.rotate(Math.PI / 4);\n        const size = Math.cos(Math.PI / 4);\n        context.fillRect(size / -2, size / -2, size, size);\n        context.rotate(-Math.PI / 4);\n        context.translate(-level.end[0] - 0.5, -level.end[1] - 0.5);\n\n        context.resetTransform();\n\n        context.fillStyle = BOOST_COLOR;\n        const walls = level.walls || [];\n        for (const [x, y] of boosts) {\n            context.beginPath();\n            context.arc((x + 0.5) * scale, (y + 0.5) * scale, scale * 0.4, 0, Math.PI * 2);\n            context.fill();\n        }\n\n        context.fillStyle = UI_WHITE;\n        context.font = `${scale * 0.2}px ${FONT}`;\n        const boosts = level.boosts || [];\n        for (const [x, y] of boosts) {\n            context.fillText('+3🦷', (x + 0.5) * scale, (y + 0.52) * scale);\n        }\n\n        context.font = `18px ${FONT}`;\n        const texts = level.texts || [];\n        for (const [x, y] of texts) {\n            context.fillText(text, x, y);\n        }\n\n        context.fillStyle = PLAYER_COLOR;\n        context.beginPath();\n        context.arc((position[0] + 0.5) * scale, (position[1] + 0.5) * scale, 0.3 * scale, 0, Math.PI * 2);\n        context.fill();\n    }\n\n    function move(directionIndex: number) {\n        const { levelIndex, level, position, bites, undoHistory } = state as State.Play;\n\n        const [x, y] = position;\n        const [dx, dy] = DIRECTIONS[directionIndex];\n        const [nx, ny] = [x + dx, y + dy];\n\n        if (nx < 0 || ny < 0 || nx >= level.scale || ny >= level.scale) return;\n\n        const hasWall = level.walls && level.walls.some(([wx, wy]) => wx === nx && wy === ny) || false;\n        if (hasWall) {\n            if (bites === 0) return;\n            eatAudio.currentTime = 0;\n            eatAudio.play();\n            level.walls!.splice(\n                level.walls!.findIndex(([wx, wy]) => wx === nx && wy === ny),\n                1,\n            );\n            --(state as State.Play).bites;\n        }\n\n        const hasBoost = (level.boosts && level.boosts.some(([wx, wy]) => wx === nx && wy === ny)) || false;\n        if (hasBoost) {\n            eatAudio.currentTime = 0;\n            eatAudio.play();\n            level.boosts = level.boosts!.filter(([wx, wy]) => wx !== nx || wy !== ny);\n            (state as State.Play).bites += 3;\n        }\n\n        if (hasWall || hasBoost) undoHistory.push({ position, directionIndex, type: hasBoost ? 'boost' : 'wall' });\n        (state as State.Play).position = [nx, ny];\n        requestDraw();\n        setLevelOverlay();\n\n        if (nx === level.end[0] && ny === level.end[1]) {\n            winAudio.play();\n            (state as State.Play).levelComplete = true;\n            const nextLevel = storage.get('nextLevel');\n            storage.set('nextLevel', Math.min(LEVELS.length, Number(nextLevel) + 1 || 1));\n\n            setOverlay(`\n                <div class=\"center\">\n                    <div style=\"display: flex; flex-direction: column; gap: 10px; background-color: ${BACKGROUND_COLOR}; border: 1px solid var(--ui-white); padding: 15px; align-items: center\">\n                        Level complete 🏆\n                        <div style=\"display: flex; gap: 5px\">\n                            <button id=\"april-menu-button\" class=\"light\">MENU</button>\n                            ${levelIndex === -1 || levelIndex === LEVELS.length - 1 ? '' : `<button id=\"april-next-button\" class=\"light\">NEXT${usingKeyboard ? ' (SPACE)' : ''}</button>`}\n                        </div>\n                    </div>\n                </div>\n            `);\n\n            window.gtag('event', 'level_end', { level_name: `kornivore-${levelIndex + 1}` });\n\n            (document.getElementById('april-menu-button') as HTMLButtonElement).addEventListener('click', () => {\n                clickAudio.play();\n                mainMenu();\n            });\n\n            const nextButton = document.getElementById('april-next-button');\n            if (nextButton) {\n                nextButton.addEventListener('click', () => {\n                    clickAudio.play();\n                    loadLevel(levelIndex + 1);\n                });\n            }\n    }\n\n    function onKeyDown(event: KeyboardEvent) {\n        usingKeyboard = true;\n\n        if (state.type !== 'play') return;\n\n        if (event.key === ' ') {\n            if (!state.levelComplete || state.levelIndex === LEVELS.length - 1) return;\n            event.preventDefault();\n            clickAudio.play();\n            loadLevel(state.levelIndex + 1);\n            return;\n        }\n\n        if (state.levelComplete) return;\n\n        if (event.key.toLowerCase() === 'r' && !resetDisabled()) {\n            reset();\n            return;\n        }\n\n        if (event.key.toLowerCase() === 'z') {\n            undo();\n            return;\n        }\n\n        const index = ALTERNATE_KEYS.includes(event.key.toLowerCase())\n            ? ALTERNATE_KEYS.indexOf(event.key.toLowerCase())\n            : KEYS.indexOf(event.key);\n        if (index === -1) return;\n\n        event.preventDefault();\n        move(index);\n    }\n\n    function onTouchStart(event: TouchEvent) {\n        usingKeyboard = false;\n        swipeOrigin = [event.touches[0].clientX, event.touches[0].clientY];\n    }\n\n    function onTouchEnd() {\n        swipeOrigin = undefined;\n    }\n\n    function onTouchMove(event: TouchEvent) {\n        if (swipeOrigin === undefined) return;\n        const { clientY, clientX } = event.touches[0];\n        if (distance(clientX, clientY, swipeOrigin[0], swipeOrigin[1]) > SWIPE_RADIUS) {\n            const dx = clientX - swipeOrigin[0];\n            const dy = clientY - swipeOrigin[1];\n            if (Math.abs(dx) > Math.abs(dy)) move(dx > 0 ? 1 : 3);\n            else move(dy > 0 ? 2 : 0);\n            swipeOrigin = undefined;\n        }\n    }\n\n    mainMenu();\n    requestDraw();\n\n    context.lineWidth = 3;\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n    musicAudio.play();\n    document.addEventListener('keydown', onKeyDown);\n    document.addEventListener('touchstart', onTouchStart);\n    document.addEventListener('touchmove', onTouchMove);\n    document.addEventListener('touchend', onTouchEnd);\n    return () => {\n        musicAudio.pause();\n        document.removeEventListener('keydown', onKeyDown);\n        document.removeEventListener('touchstart', onTouchStart);\n        document.removeEventListener('touchmove', onTouchMove);\n        document.removeEventListener('touchend', onTouchEnd);\n    };\n}}","README.md":" ","assets.json":"","main.py":"\n","pxt.json":"{\n    \"name\": \"corn\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1749738602476,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"const click = Assets.click;\nconst corn = Assets.corn;\nconst eat = Assets.eat;\nconst logo = Assets.logo;\nconst music = Assets.music;\nconst win = Assets.win;\n\ninterface Level {\n    scale: number;\n    start: [number, number];\n    end: [number, number];\n    bites: number;\n    walls?: [number, number][];\n    texts?: { x: number; y: number; text: string }[];\n    boosts?: [number, number][];\n}\n\nnamespace State {\n    export interface Menu {\n        type: 'menu';\n    }\n\n    export interface Play {\n        type: 'play';\n        levelIndex: number;\n        level: Level;\n        position: [number, number];\n        bites: number;\n        undoHistory: { position: [number, number]; directionIndex: number; type: 'wall' | 'boost' }[];\n        levelComplete: boolean;\n    }\n\n    export type Any = Menu | Play;\n}\n\nimport { april, may } from './path/to/myModule';\n\nconst april = MyNamespace.april;\nconst may = MyNamespace.may;\n\napril();\nmay();\n    const BACKGROUND_COLOR = '#0a3209';\n    const BOOST_COLOR = '#0077ff';\n    const CORN_COLOR = '#d5b803';\n    const END_COLOR = '#64e364';\n    const PLAYER_COLOR = '#c83c27';\n\n    const KEYS = ['ArrowUp', 'ArrowRight', 'ArrowDown', 'ArrowLeft'];\n    const ALTERNATE_KEYS = ['w', 'd', 's', 'a'];\n    const DIRECTIONS = [\n        [0, -1],\n        [1, 0],\n        [0, 1],\n        [-1, 0],\n    ];\n    const SWIPE_RADIUS = 50;\n\n    // prettier-ignore\n    const LEVELS: Level[] = [\n        // 1\n        {\n            scale: 9,\n            start: [2, 2],\n            end: [6, 6],\n            bites: 0,\n            texts: [\n                { x: 300, y: 300, text: 'WASD/arrow keys/swipe to move' },\n                { x: 252, y: 168, text: '← Start here' },\n                { x: 348, y: 433, text: 'Go here →' },\n            ],\n        },\n        // 2\n        {\n            scale: 11,\n            start: [1, 9],\n            end: [9, 1],\n            bites: 0,\n            texts: [{ x: 300, y: 300, text: 'Solve the corn maze' }],\n            walls: [[0, 0], [0, 10], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 10], [10, 0], [10, 10], [10, 1], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [2, 0], [2, 10], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 8], [2, 9], [3, 0], [3, 10], [3, 2], [3, 6], [4, 0], [4, 10], [4, 1], [4, 2], [4, 4], [4, 6], [4, 7], [4, 8], [5, 0], [5, 10], [5, 4], [6, 0], [6, 10], [6, 2], [6, 3], [6, 4], [6, 6], [6, 7], [6, 8], [7, 0], [7, 10], [7, 2], [7, 6], [7, 8], [8, 0], [8, 10], [8, 2], [8, 4], [8, 5], [8, 6], [8, 8], [9, 0], [9, 10], [9, 2], [9, 6]],\n        },\n        // 3\n        {\n            scale: 11,\n            start: [2, 5],\n            end: [8, 5],\n            bites: 1,\n            walls: [[0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [2, 3], [2, 4], [2, 6], [2, 7], [3, 3], [3, 4], [3, 6], [3, 7], [4, 3], [4, 4], [4, 6], [4, 7], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [6, 3], [6, 4], [6, 6], [6, 7], [7, 3], [7, 4], [7, 6], [7, 7], [8, 3], [8, 4], [8, 6], [8, 7], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7]],\n            texts: [\n                { x: 451, y: 55, text: '↑ You can eat this many walls' },\n                { x: 360, y: 300, text: '← Eat' },\n            ],\n        },\n        // 4\n        {\n            scale: 11,\n            start: [2, 5],\n            end: [8, 5],\n            bites: 2,\n            walls: [[1, 4], [1, 5], [1, 6], [2, 4], [2, 6], [3, 4], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6], [6, 4], [6, 5], [6, 6], [7, 4], [7, 6], [8, 4], [8, 6], [9, 4], [9, 5], [9, 6]],\n        },\n        // 5\n        {\n            scale: 11,\n            start: [1, 1],\n            end: [9, 9],\n            bites: 11,\n            walls: [[0, 0], [0, 10], [0, 1], [0, 2], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 10], [1, 2], [1, 3], [1, 4], [1, 5], [1, 7], [1, 8], [10, 10], [10, 1], [10, 2], [10, 3], [10, 5], [10, 6], [10, 8], [10, 9], [2, 0], [2, 10], [2, 1], [2, 2], [2, 3], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [3, 0], [3, 10], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 0], [4, 1], [4, 3], [4, 4], [4, 5], [4, 6], [4, 8], [4, 9], [5, 0], [5, 10], [5, 1], [5, 2], [5, 3], [5, 5], [5, 6], [5, 7], [5, 8], [5, 9], [6, 10], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [7, 0], [7, 10], [7, 1], [7, 2], [7, 3], [7, 4], [7, 6], [7, 7], [7, 8], [8, 0], [8, 10], [8, 1], [8, 3], [8, 4], [8, 5], [8, 6], [8, 8], [8, 9], [9, 0], [9, 10], [9, 1], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8]],\n        },\n        // 6\n        {\n            scale: 11,\n            start: [9, 1],\n            end: [1, 9],\n            bites: 6,\n            walls: [[0, 0], [0, 10], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 10], [1, 2], [1, 4], [1, 6], [1, 8], [10, 0], [10, 1], [10, 2], [10, 3], [10, 4], [2, 0], [2, 10], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [3, 0], [3, 10], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 0], [4, 10], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [5, 0], [5, 2], [5, 3], [5, 4], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [7, 0], [7, 2], [7, 3], [7, 4], [8, 0], [8, 2], [8, 3], [8, 4], [9, 0], [9, 2], [9, 3], [9, 4]],\n        },\n        // 7\n        {\n            scale: 15,\n            start: [2, 2],\n            end: [12, 12],\n            bites: 3,\n            walls: [[0, 0], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 12], [1, 13], [1, 14], [1, 4], [1, 7], [10, 0], [10, 10], [10, 11], [10, 12], [10, 13], [10, 14], [10, 2], [10, 4], [10, 6], [10, 7], [10, 8], [10, 9], [11, 0], [11, 10], [11, 14], [11, 2], [11, 4], [11, 6], [12, 0], [12, 10], [12, 14], [12, 2], [12, 4], [12, 5], [12, 6], [12, 7], [12, 8], [13, 0], [13, 10], [13, 14], [13, 4], [13, 8], [14, 0], [14, 10], [14, 11], [14, 12], [14, 13], [14, 14], [14, 1], [14, 2], [14, 3], [14, 4], [14, 5], [14, 6], [14, 7], [14, 8], [14, 9], [2, 0], [2, 10], [2, 14], [2, 6], [2, 7], [2, 8], [2, 9], [3, 0], [3, 10], [3, 11], [3, 12], [3, 14], [3, 4], [3, 5], [3, 6], [4, 0], [4, 10], [4, 12], [4, 13], [4, 14], [4, 1], [4, 3], [4, 4], [4, 6], [4, 7], [4, 8], [5, 0], [5, 10], [5, 12], [5, 14], [5, 3], [5, 8], [5, 9], [6, 0], [6, 10], [6, 12], [6, 14], [6, 2], [6, 3], [6, 5], [6, 6], [6, 7], [6, 8], [7, 0], [7, 10], [7, 12], [7, 14], [7, 1], [7, 2], [7, 5], [7, 8], [8, 0], [8, 10], [8, 11], [8, 12], [8, 14], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [9, 0], [9, 12], [9, 14], [9, 2], [9, 4], [9, 6]],\n        },\n        // 8\n        {\n            scale: 16,\n            start: [6, 8],\n            end: [9, 8],\n            bites: 1,\n            walls: [[0, 0], [0, 14], [0, 15], [0, 1], [0, 7], [1, 0], [1, 10], [1, 11], [1, 12], [1, 14], [1, 15], [1, 1], [1, 2], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [10, 0], [10, 10], [10, 11], [10, 15], [10, 2], [10, 4], [10, 5], [11, 10], [11, 11], [11, 13], [11, 15], [11, 2], [11, 4], [11, 5], [11, 6], [11, 7], [12, 10], [12, 13], [12, 15], [12, 1], [12, 2], [12, 4], [12, 5], [12, 6], [12, 7], [12, 8], [12, 9], [13, 10], [13, 11], [13, 12], [13, 13], [13, 4], [13, 8], [13, 9], [14, 0], [14, 13], [14, 15], [14, 2], [14, 6], [15, 0], [15, 10], [15, 11], [15, 15], [15, 1], [15, 2], [15, 3], [15, 5], [15, 6], [15, 7], [15, 8], [2, 0], [2, 11], [2, 15], [2, 1], [2, 2], [2, 4], [2, 5], [3, 0], [3, 11], [3, 13], [3, 15], [3, 1], [3, 5], [3, 7], [3, 8], [3, 9], [4, 0], [4, 13], [4, 1], [4, 3], [4, 4], [4, 5], [4, 9], [5, 0], [5, 10], [5, 11], [5, 12], [5, 13], [5, 15], [5, 1], [5, 4], [5, 5], [5, 6], [5, 7], [5, 9], [6, 0], [6, 15], [6, 1], [6, 2], [6, 7], [6, 9], [7, 0], [7, 11], [7, 12], [7, 13], [7, 15], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [7, 9], [8, 0], [8, 10], [8, 11], [8, 15], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [9, 0], [9, 10], [9, 11], [9, 13], [9, 14], [9, 15], [9, 2], [9, 4], [9, 9]],\n        },\n        // 9\n        {\n            scale: 21,\n            start: [1, 9],\n            end: [19, 13],\n            bites: 7,\n            walls: [[0, 0], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], [0, 16], [0, 17], [0, 18], [0, 19], [0, 1], [0, 20], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 13], [1, 14], [1, 15], [1, 16], [1, 17], [1, 18], [1, 19], [1, 1], [1, 20], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [10, 0], [10, 10], [10, 11], [10, 12], [10, 13], [10, 14], [10, 15], [10, 16], [10, 17], [10, 18], [10, 19], [10, 1], [10, 20], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [11, 0], [11, 14], [11, 15], [11, 16], [11, 17], [11, 18], [11, 19], [11, 1], [11, 20], [11, 2], [11, 3], [11, 4], [11, 5], [11, 6], [11, 7], [11, 8], [12, 0], [12, 12], [12, 13], [12, 14], [12, 15], [12, 16], [12, 17], [12, 18], [12, 19], [12, 1], [12, 20], [12, 2], [12, 3], [12, 4], [12, 5], [12, 6], [12, 7], [12, 9], [13, 0], [13, 11], [13, 13], [13, 14], [13, 15], [13, 16], [13, 17], [13, 18], [13, 19], [13, 1], [13, 20], [13, 2], [13, 3], [13, 4], [13, 5], [13, 6], [13, 7], [13, 9], [14, 0], [14, 11], [14, 12], [14, 14], [14, 15], [14, 16], [14, 17], [14, 18], [14, 19], [14, 1], [14, 20], [14, 2], [14, 3], [14, 4], [14, 5], [14, 6], [14, 7], [14, 8], [15, 0], [15, 10], [15, 11], [15, 12], [15, 13], [15, 14], [15, 15], [15, 16], [15, 17], [15, 18], [15, 19], [15, 1], [15, 20], [15, 2], [15, 3], [15, 4], [15, 5], [15, 6], [15, 7], [15, 8], [15, 9], [16, 0], [16, 14], [16, 15], [16, 16], [16, 17], [16, 18], [16, 19], [16, 1], [16, 20], [16, 2], [16, 3], [16, 4], [16, 5], [16, 6], [16, 7], [17, 0], [17, 10], [17, 11], [17, 12], [17, 13], [17, 14], [17, 15], [17, 16], [17, 17], [17, 18], [17, 19], [17, 1], [17, 20], [17, 2], [17, 3], [17, 4], [17, 5], [17, 6], [17, 7], [17, 8], [18, 0], [18, 11], [18, 12], [18, 13], [18, 14], [18, 15], [18, 16], [18, 17], [18, 18], [18, 19], [18, 1], [18, 20], [18, 2], [18, 3], [18, 4], [18, 5], [18, 6], [18, 7], [18, 8], [18, 9], [19, 0], [19, 14], [19, 15], [19, 16], [19, 17], [19, 18], [19, 19], [19, 1], [19, 20], [19, 2], [19, 3], [19, 4], [19, 5], [19, 6], [19, 7], [2, 0], [2, 10], [2, 11], [2, 12], [2, 14], [2, 15], [2, 16], [2, 17], [2, 18], [2, 19], [2, 1], [2, 20], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 9], [20, 0], [20, 10], [20, 11], [20, 12], [20, 13], [20, 14], [20, 15], [20, 16], [20, 17], [20, 18], [20, 19], [20, 1], [20, 20], [20, 2], [20, 3], [20, 4], [20, 5], [20, 6], [20, 7], [20, 8], [20, 9], [3, 0], [3, 10], [3, 11], [3, 12], [3, 14], [3, 15], [3, 16], [3, 17], [3, 18], [3, 19], [3, 1], [3, 20], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 9], [4, 0], [4, 10], [4, 11], [4, 12], [4, 14], [4, 15], [4, 16], [4, 17], [4, 18], [4, 19], [4, 1], [4, 20], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 9], [5, 0], [5, 10], [5, 11], [5, 12], [5, 13], [5, 14], [5, 15], [5, 16], [5, 17], [5, 18], [5, 19], [5, 1], [5, 20], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [5, 9], [6, 0], [6, 13], [6, 14], [6, 15], [6, 16], [6, 17], [6, 18], [6, 19], [6, 1], [6, 20], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [7, 0], [7, 10], [7, 11], [7, 12], [7, 14], [7, 15], [7, 16], [7, 17], [7, 18], [7, 19], [7, 1], [7, 20], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 9], [8, 0], [8, 10], [8, 11], [8, 12], [8, 14], [8, 15], [8, 16], [8, 17], [8, 18], [8, 19], [8, 1], [8, 20], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 9], [9, 0], [9, 13], [9, 14], [9, 15], [9, 16], [9, 17], [9, 18], [9, 19], [9, 1], [9, 20], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8]],\n        },\n        // 10\n        {\n            scale: 11,\n            start: [1, 5],\n            end: [9, 5],\n            bites: 2,\n            walls: [[0, 0], [0, 10], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 10], [10, 0], [10, 10], [10, 1], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [2, 0], [2, 10], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [3, 0], [3, 10], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 0], [4, 10], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [5, 0], [5, 10], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [6, 0], [6, 10], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [7, 0], [7, 10], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [8, 0], [8, 10], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [9, 0], [9, 10], [9, 1], [9, 2], [9, 3], [9, 4], [9, 6], [9, 7], [9, 8]],\n            boosts: [[6, 1]],\n        },\n        // 11\n        {\n            scale: 15,\n            start: [7, 7],\n            end: [14, 14],\n            bites: 1,\n            walls: [[10, 11], [10, 12], [10, 13], [10, 14], [10, 2], [10, 3], [11, 10], [11, 11], [11, 12], [11, 13], [11, 14], [11, 2], [11, 3], [11, 4], [11, 5], [11, 6], [11, 7], [11, 8], [11, 9], [12, 10], [12, 11], [12, 12], [12, 13], [12, 14], [12, 2], [12, 3], [12, 4], [12, 5], [12, 6], [12, 7], [12, 8], [12, 9], [13, 10], [13, 11], [13, 12], [13, 13], [13, 14], [13, 9], [14, 10], [14, 11], [14, 12], [14, 13], [14, 9], [2, 10], [2, 11], [2, 12], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 11], [4, 12], [4, 2], [4, 3], [5, 11], [5, 12], [5, 2], [5, 3], [5, 5], [5, 6], [5, 8], [5, 9], [6, 11], [6, 12], [6, 2], [6, 3], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [7, 11], [7, 2], [7, 3], [7, 5], [7, 6], [7, 8], [7, 9], [8, 11], [8, 12], [8, 2], [8, 3], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [9, 11], [9, 12], [9, 13], [9, 14], [9, 2], [9, 3], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9]],\n            boosts: [[7, 1], [10, 7]],\n        },\n        // 12\n        {\n            scale: 15,\n            start: [4, 7],\n            end: [14, 0],\n            bites: 1,\n            walls: [[0, 10], [0, 12], [0, 13], [0, 14], [0, 9], [1, 10], [1, 11], [1, 12], [1, 13], [1, 9], [10, 0], [10, 10], [10, 11], [10, 12], [10, 13], [10, 14], [10, 1], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [11, 0], [11, 10], [11, 11], [11, 13], [11, 14], [11, 1], [11, 2], [11, 3], [11, 4], [11, 5], [11, 6], [11, 7], [11, 8], [11, 9], [12, 0], [12, 11], [12, 12], [12, 13], [12, 14], [12, 1], [12, 2], [12, 3], [12, 4], [12, 5], [12, 6], [12, 7], [12, 8], [12, 9], [13, 0], [13, 10], [13, 11], [13, 12], [13, 13], [13, 1], [13, 2], [13, 3], [13, 4], [13, 5], [13, 6], [13, 7], [13, 8], [13, 9], [14, 10], [14, 11], [14, 13], [14, 14], [14, 1], [14, 2], [14, 3], [14, 4], [14, 5], [14, 6], [14, 7], [14, 8], [14, 9], [2, 10], [2, 11], [2, 12], [2, 13], [2, 14], [2, 9], [3, 11], [3, 12], [3, 13], [3, 14], [3, 9], [4, 10], [4, 11], [4, 12], [4, 13], [4, 14], [4, 9], [5, 10], [5, 11], [5, 12], [5, 13], [5, 9], [6, 0], [6, 10], [6, 11], [6, 12], [6, 13], [6, 14], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [7, 0], [7, 10], [7, 12], [7, 13], [7, 14], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [7, 9], [8, 0], [8, 10], [8, 11], [8, 12], [8, 13], [8, 14], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [9, 0], [9, 10], [9, 11], [9, 12], [9, 13], [9, 1], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9]],\n            boosts: [[0, 11], [1, 14], [11, 12], [12, 10], [13, 14], [14, 12], [3, 10], [5, 14], [7, 11], [9, 14]],\n        },\n        // 13\n        {\n            scale: 21,\n            start: [10, 10],\n            end: [1, 19],\n            bites: 1,\n            walls: [[0, 0], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], [0, 1], [0, 20], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 10], [1, 11], [1, 15], [1, 16], [1, 17], [1, 18], [1, 1], [1, 20], [1, 3], [1, 4], [1, 5], [1, 6], [1, 8], [1, 9], [10, 0], [10, 12], [10, 13], [10, 14], [10, 16], [10, 18], [10, 1], [10, 20], [10, 2], [10, 4], [10, 5], [11, 0], [11, 10], [11, 11], [11, 12], [11, 13], [11, 14], [11, 16], [11, 18], [11, 1], [11, 20], [11, 2], [11, 5], [11, 6], [11, 7], [11, 8], [11, 9], [12, 0], [12, 10], [12, 11], [12, 12], [12, 14], [12, 16], [12, 18], [12, 1], [12, 20], [12, 2], [12, 3], [12, 5], [12, 6], [12, 7], [12, 8], [12, 9], [13, 0], [13, 10], [13, 11], [13, 14], [13, 15], [13, 16], [13, 17], [13, 18], [13, 19], [13, 1], [13, 20], [13, 3], [13, 5], [13, 6], [13, 7], [13, 8], [13, 9], [14, 0], [14, 11], [14, 13], [14, 14], [14, 15], [14, 17], [14, 18], [14, 19], [14, 1], [14, 20], [15, 0], [15, 10], [15, 11], [15, 12], [15, 13], [15, 14], [15, 15], [15, 16], [15, 17], [15, 18], [15, 19], [15, 1], [15, 20], [15, 2], [15, 3], [15, 5], [15, 6], [15, 8], [15, 9], [16, 0], [16, 10], [16, 11], [16, 12], [16, 13], [16, 14], [16, 15], [16, 17], [16, 18], [16, 19], [16, 20], [16, 5], [16, 6], [16, 8], [16, 9], [17, 0], [17, 10], [17, 11], [17, 12], [17, 13], [17, 14], [17, 15], [17, 18], [17, 1], [17, 20], [17, 2], [17, 3], [17, 4], [17, 5], [17, 6], [17, 8], [17, 9], [18, 0], [18, 12], [18, 17], [18, 18], [18, 20], [18, 2], [18, 3], [18, 4], [18, 5], [18, 6], [18, 7], [18, 8], [19, 0], [19, 10], [19, 11], [19, 12], [19, 13], [19, 14], [19, 15], [19, 16], [19, 17], [19, 18], [19, 20], [19, 6], [19, 7], [19, 8], [19, 9], [2, 0], [2, 10], [2, 11], [2, 13], [2, 14], [2, 15], [2, 16], [2, 17], [2, 18], [2, 19], [2, 1], [2, 20], [2, 8], [2, 9], [20, 0], [20, 10], [20, 11], [20, 12], [20, 13], [20, 14], [20, 15], [20, 16], [20, 17], [20, 18], [20, 19], [20, 1], [20, 20], [20, 2], [20, 3], [20, 4], [20, 5], [20, 6], [20, 7], [20, 8], [20, 9], [3, 0], [3, 10], [3, 11], [3, 13], [3, 14], [3, 15], [3, 19], [3, 1], [3, 20], [3, 2], [3, 3], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 0], [4, 10], [4, 11], [4, 12], [4, 13], [4, 14], [4, 15], [4, 17], [4, 19], [4, 1], [4, 20], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [5, 0], [5, 10], [5, 11], [5, 15], [5, 16], [5, 17], [5, 18], [5, 19], [5, 1], [5, 20], [5, 2], [5, 3], [5, 5], [5, 9], [6, 0], [6, 10], [6, 11], [6, 12], [6, 13], [6, 14], [6, 15], [6, 16], [6, 17], [6, 18], [6, 19], [6, 1], [6, 20], [6, 2], [6, 5], [6, 6], [6, 7], [6, 9], [7, 0], [7, 10], [7, 11], [7, 12], [7, 13], [7, 18], [7, 1], [7, 20], [7, 2], [7, 4], [7, 5], [7, 9], [8, 0], [8, 10], [8, 11], [8, 12], [8, 13], [8, 14], [8, 15], [8, 16], [8, 17], [8, 18], [8, 1], [8, 20], [8, 2], [8, 4], [8, 5], [8, 7], [8, 8], [8, 9], [9, 0], [9, 10], [9, 12], [9, 13], [9, 14], [9, 18], [9, 1], [9, 20], [9, 2], [9, 4], [9, 5], [9, 7], [9, 8], [9, 9]],\n            boosts: [[1, 7], [19, 19], [19, 5], [9, 11]],\n        },\n        // 14\n        {\n            scale: 21,\n            start: [9, 10],\n            end: [11, 10],\n            bites: 0,\n            walls: [[1, 10], [1, 11], [1, 12], [1, 13], [1, 14], [1, 15], [1, 16], [1, 17], [1, 18], [1, 19], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [10, 10], [10, 11], [10, 12], [10, 13], [10, 14], [10, 15], [10, 17], [10, 19], [10, 2], [10, 4], [10, 6], [10, 7], [10, 8], [10, 9], [11, 11], [11, 12], [11, 13], [11, 14], [11, 15], [11, 17], [11, 19], [11, 2], [11, 4], [11, 6], [11, 7], [11, 8], [11, 9], [12, 10], [12, 11], [12, 12], [12, 13], [12, 14], [12, 15], [12, 19], [12, 2], [12, 4], [12, 6], [12, 7], [12, 8], [12, 9], [13, 10], [13, 11], [13, 12], [13, 13], [13, 14], [13, 15], [13, 16], [13, 17], [13, 19], [13, 2], [13, 4], [13, 6], [13, 7], [13, 8], [13, 9], [14, 10], [14, 11], [14, 12], [14, 13], [14, 14], [14, 19], [14, 2], [14, 4], [14, 6], [14, 7], [14, 8], [14, 9], [15, 10], [15, 11], [15, 12], [15, 13], [15, 14], [15, 16], [15, 17], [15, 19], [15, 2], [15, 4], [15, 6], [15, 7], [15, 8], [15, 9], [16, 11], [16, 16], [16, 17], [16, 19], [16, 2], [16, 4], [16, 9], [17, 11], [17, 12], [17, 13], [17, 14], [17, 17], [17, 19], [17, 4], [17, 5], [17, 6], [17, 7], [17, 8], [17, 9], [18, 14], [18, 15], [18, 16], [18, 17], [18, 19], [18, 2], [19, 10], [19, 11], [19, 12], [19, 13], [19, 14], [19, 15], [19, 16], [19, 17], [19, 18], [19, 19], [19, 2], [19, 3], [19, 4], [19, 5], [19, 6], [19, 7], [19, 8], [19, 9], [2, 19], [2, 2], [2, 9], [3, 11], [3, 12], [3, 13], [3, 15], [3, 17], [3, 19], [3, 2], [3, 4], [3, 6], [3, 7], [3, 9], [4, 11], [4, 13], [4, 15], [4, 17], [4, 19], [4, 2], [4, 4], [4, 6], [4, 7], [4, 9], [5, 11], [5, 13], [5, 15], [5, 17], [5, 19], [5, 2], [5, 4], [5, 6], [5, 7], [6, 11], [6, 15], [6, 17], [6, 18], [6, 19], [6, 2], [6, 4], [6, 6], [6, 9], [7, 11], [7, 12], [7, 13], [7, 14], [7, 15], [7, 19], [7, 2], [7, 3], [7, 4], [7, 6], [7, 8], [7, 9], [8, 11], [8, 12], [8, 13], [8, 14], [8, 15], [8, 17], [8, 18], [8, 19], [8, 2], [8, 6], [8, 8], [8, 9], [9, 11], [9, 12], [9, 13], [9, 14], [9, 15], [9, 17], [9, 2], [9, 3], [9, 4], [9, 6], [9, 9]],\n            boosts: [[18, 10]],\n        },\n        // 15\n        {\n            scale: 21,\n            start: [10, 10],\n            end: [0, 18],\n            bites: 1,\n            walls: [[0, 0], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], [0, 16], [0, 17], [0, 19], [0, 1], [0, 20], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 10], [1, 11], [1, 12], [1, 13], [1, 14], [1, 15], [1, 16], [1, 17], [1, 18], [1, 19], [1, 1], [1, 20], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [10, 0], [10, 11], [10, 12], [10, 13], [10, 14], [10, 15], [10, 16], [10, 17], [10, 18], [10, 19], [10, 1], [10, 20], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [11, 0], [11, 10], [11, 11], [11, 12], [11, 13], [11, 14], [11, 15], [11, 16], [11, 17], [11, 18], [11, 19], [11, 1], [11, 20], [11, 2], [11, 3], [11, 4], [11, 5], [11, 6], [11, 7], [11, 8], [11, 9], [12, 0], [12, 10], [12, 11], [12, 12], [12, 13], [12, 14], [12, 15], [12, 16], [12, 17], [12, 18], [12, 19], [12, 1], [12, 20], [12, 2], [12, 3], [12, 4], [12, 5], [12, 6], [12, 7], [12, 8], [12, 9], [13, 0], [13, 11], [13, 12], [13, 13], [13, 14], [13, 15], [13, 16], [13, 17], [13, 18], [13, 19], [13, 1], [13, 20], [13, 2], [13, 3], [13, 4], [13, 5], [13, 6], [13, 7], [13, 8], [13, 9], [14, 0], [14, 10], [14, 11], [14, 12], [14, 13], [14, 14], [14, 15], [14, 16], [14, 17], [14, 18], [14, 19], [14, 1], [14, 20], [14, 2], [14, 3], [14, 4], [14, 5], [14, 6], [14, 7], [14, 8], [14, 9], [15, 0], [15, 10], [15, 11], [15, 12], [15, 13], [15, 14], [15, 15], [15, 16], [15, 17], [15, 18], [15, 19], [15, 1], [15, 20], [15, 2], [15, 3], [15, 4], [15, 5], [15, 6], [15, 7], [15, 8], [15, 9], [16, 0], [16, 10], [16, 11], [16, 12], [16, 13], [16, 14], [16, 15], [16, 16], [16, 17], [16, 18], [16, 19], [16, 1], [16, 20], [16, 2], [16, 3], [16, 4], [16, 5], [16, 6], [16, 7], [16, 8], [16, 9], [17, 0], [17, 10], [17, 11], [17, 12], [17, 13], [17, 14], [17, 15], [17, 16], [17, 17], [17, 18], [17, 19], [17, 1], [17, 20], [17, 2], [17, 3], [17, 4], [17, 5], [17, 6], [17, 7], [17, 8], [17, 9], [18, 0], [18, 10], [18, 11], [18, 12], [18, 13], [18, 14], [18, 15], [18, 16], [18, 17], [18, 18], [18, 19], [18, 1], [18, 20], [18, 2], [18, 3], [18, 4], [18, 5], [18, 6], [18, 7], [18, 8], [18, 9], [19, 0], [19, 10], [19, 11], [19, 12], [19, 13], [19, 14], [19, 15], [19, 16], [19, 17], [19, 18], [19, 19], [19, 1], [19, 20], [19, 2], [19, 3], [19, 4], [19, 5], [19, 6], [19, 7], [19, 8], [19, 9], [2, 0], [2, 11], [2, 12], [2, 13], [2, 14], [2, 15], [2, 16], [2, 17], [2, 18], [2, 19], [2, 1], [2, 20], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [20, 0], [20, 12], [20, 13], [20, 14], [20, 15], [20, 16], [20, 17], [20, 18], [20, 19], [20, 1], [20, 20], [20, 2], [20, 3], [20, 4], [20, 5], [20, 6], [20, 7], [20, 8], [3, 0], [3, 11], [3, 12], [3, 13], [3, 14], [3, 15], [3, 16], [3, 17], [3, 18], [3, 19], [3, 1], [3, 20], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 0], [4, 10], [4, 11], [4, 12], [4, 13], [4, 14], [4, 15], [4, 16], [4, 17], [4, 18], [4, 19], [4, 1], [4, 20], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [5, 0], [5, 10], [5, 11], [5, 12], [5, 13], [5, 14], [5, 15], [5, 16], [5, 17], [5, 18], [5, 19], [5, 1], [5, 20], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [5, 9], [6, 0], [6, 10], [6, 11], [6, 12], [6, 13], [6, 14], [6, 15], [6, 16], [6, 17], [6, 18], [6, 19], [6, 1], [6, 20], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [7, 0], [7, 10], [7, 11], [7, 12], [7, 13], [7, 14], [7, 15], [7, 16], [7, 17], [7, 18], [7, 19], [7, 1], [7, 20], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [7, 9], [8, 0], [8, 11], [8, 12], [8, 13], [8, 14], [8, 15], [8, 16], [8, 17], [8, 18], [8, 19], [8, 1], [8, 20], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [9, 0], [9, 10], [9, 11], [9, 12], [9, 13], [9, 14], [9, 15], [9, 16], [9, 17], [9, 18], [9, 19], [9, 1], [9, 20], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9]],\n            boosts: [[13, 10], [2, 10], [20, 10], [20, 11], [20, 9], [3, 10], [8, 10]],\n        },\n        // 16\n        {\n            scale: 25,\n            start: [12, 12],\n            end: [24, 24],\n            bites: 1,\n            walls: [[0, 0], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], [0, 16], [0, 17], [0, 18], [0, 19], [0, 1], [0, 20], [0, 21], [0, 22], [0, 23], [0, 24], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 16], [1, 18], [1, 19], [1, 1], [1, 20], [1, 21], [1, 22], [1, 23], [1, 24], [1, 2], [1, 3], [1, 5], [10, 0], [10, 10], [10, 11], [10, 12], [10, 13], [10, 14], [10, 20], [10, 21], [10, 22], [10, 24], [10, 4], [10, 7], [10, 8], [10, 9], [11, 0], [11, 10], [11, 14], [11, 16], [11, 18], [11, 22], [11, 24], [11, 2], [11, 4], [11, 5], [12, 0], [12, 10], [12, 14], [12, 15], [12, 16], [12, 18], [12, 19], [12, 20], [12, 24], [12, 2], [12, 5], [12, 7], [12, 8], [12, 9], [13, 0], [13, 10], [13, 14], [13, 1], [13, 20], [13, 21], [13, 22], [13, 23], [13, 24], [13, 2], [13, 3], [13, 4], [13, 5], [13, 7], [14, 0], [14, 10], [14, 11], [14, 12], [14, 13], [14, 14], [14, 16], [14, 17], [14, 18], [14, 19], [14, 1], [14, 20], [14, 24], [14, 7], [14, 9], [15, 0], [15, 12], [15, 1], [15, 22], [15, 24], [15, 3], [15, 4], [15, 5], [15, 6], [15, 7], [16, 0], [16, 10], [16, 11], [16, 12], [16, 14], [16, 15], [16, 16], [16, 17], [16, 18], [16, 1], [16, 20], [16, 21], [16, 22], [16, 24], [16, 6], [16, 9], [17, 0], [17, 14], [17, 18], [17, 1], [17, 22], [17, 23], [17, 24], [17, 3], [17, 4], [17, 5], [17, 6], [17, 7], [17, 9], [18, 0], [18, 11], [18, 12], [18, 13], [18, 14], [18, 16], [18, 17], [18, 18], [18, 1], [18, 20], [18, 22], [18, 23], [18, 24], [18, 3], [18, 7], [18, 8], [18, 9], [19, 0], [19, 11], [19, 14], [19, 18], [19, 19], [19, 20], [19, 21], [19, 22], [19, 23], [19, 24], [19, 3], [19, 5], [19, 8], [2, 0], [2, 10], [2, 11], [2, 12], [2, 13], [2, 14], [2, 18], [2, 1], [2, 23], [2, 24], [2, 3], [2, 5], [2, 7], [2, 8], [2, 9], [20, 0], [20, 11], [20, 13], [20, 14], [20, 16], [20, 1], [20, 20], [20, 21], [20, 22], [20, 23], [20, 24], [20, 3], [20, 5], [20, 6], [20, 8], [20, 9], [21, 0], [21, 11], [21, 16], [21, 17], [21, 18], [21, 19], [21, 1], [21, 20], [21, 21], [21, 22], [21, 23], [21, 24], [21, 3], [21, 6], [22, 0], [22, 10], [22, 11], [22, 13], [22, 14], [22, 19], [22, 1], [22, 20], [22, 21], [22, 22], [22, 23], [22, 24], [22, 3], [22, 5], [22, 6], [22, 7], [22, 8], [22, 9], [23, 0], [23, 14], [23, 15], [23, 16], [23, 17], [23, 18], [23, 19], [23, 1], [23, 20], [23, 21], [23, 22], [23, 23], [23, 24], [23, 2], [23, 3], [24, 0], [24, 10], [24, 11], [24, 12], [24, 13], [24, 14], [24, 15], [24, 16], [24, 17], [24, 18], [24, 19], [24, 1], [24, 20], [24, 21], [24, 22], [24, 23], [24, 2], [24, 3], [24, 4], [24, 5], [24, 6], [24, 7], [24, 8], [24, 9], [3, 0], [3, 12], [3, 16], [3, 17], [3, 18], [3, 1], [3, 20], [3, 21], [3, 22], [3, 23], [3, 24], [3, 3], [3, 5], [3, 7], [4, 0], [4, 10], [4, 12], [4, 14], [4, 16], [4, 18], [4, 1], [4, 20], [4, 24], [4, 5], [4, 7], [4, 8], [4, 9], [5, 0], [5, 10], [5, 12], [5, 14], [5, 18], [5, 1], [5, 20], [5, 22], [5, 24], [5, 2], [5, 3], [6, 0], [6, 10], [6, 12], [6, 14], [6, 15], [6, 16], [6, 17], [6, 18], [6, 20], [6, 22], [6, 24], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [7, 0], [7, 10], [7, 12], [7, 20], [7, 22], [7, 24], [7, 2], [7, 3], [8, 0], [8, 10], [8, 12], [8, 13], [8, 14], [8, 15], [8, 16], [8, 17], [8, 18], [8, 19], [8, 20], [8, 22], [8, 24], [8, 2], [8, 5], [8, 6], [8, 7], [8, 8], [9, 0], [9, 10], [9, 16], [9, 18], [9, 22], [9, 24], [9, 2], [9, 4], [9, 5]],\n            boosts: [[2, 22], [2, 2], [22, 2]],\n        },\n        // 17\n        {\n            scale: 21,\n            start: [0, 20],\n            end: [20, 0],\n            bites: 2,\n            walls: [[0, 11], [0, 13], [0, 15], [0, 17], [0, 19], [0, 1], [0, 3], [0, 5], [0, 7], [0, 9], [1, 0], [1, 10], [1, 12], [1, 14], [1, 16], [1, 18], [1, 20], [1, 2], [1, 4], [1, 6], [1, 8], [10, 11], [10, 13], [10, 15], [10, 17], [10, 19], [10, 1], [10, 3], [10, 5], [10, 7], [10, 9], [11, 0], [11, 10], [11, 12], [11, 14], [11, 16], [11, 18], [11, 20], [11, 2], [11, 4], [11, 6], [11, 8], [12, 11], [12, 13], [12, 15], [12, 17], [12, 19], [12, 1], [12, 3], [12, 5], [12, 7], [12, 9], [13, 0], [13, 10], [13, 12], [13, 14], [13, 16], [13, 18], [13, 20], [13, 2], [13, 4], [13, 6], [13, 8], [14, 11], [14, 13], [14, 15], [14, 17], [14, 19], [14, 1], [14, 3], [14, 5], [14, 7], [14, 9], [15, 0], [15, 10], [15, 12], [15, 14], [15, 16], [15, 18], [15, 20], [15, 2], [15, 4], [15, 6], [15, 8], [16, 11], [16, 13], [16, 15], [16, 17], [16, 19], [16, 1], [16, 3], [16, 5], [16, 7], [16, 9], [17, 0], [17, 10], [17, 12], [17, 14], [17, 16], [17, 18], [17, 20], [17, 2], [17, 4], [17, 6], [17, 8], [18, 11], [18, 13], [18, 15], [18, 17], [18, 19], [18, 1], [18, 3], [18, 5], [18, 7], [18, 9], [19, 0], [19, 10], [19, 12], [19, 14], [19, 16], [19, 18], [19, 20], [19, 2], [19, 4], [19, 6], [19, 8], [2, 11], [2, 13], [2, 15], [2, 17], [2, 19], [2, 1], [2, 3], [2, 5], [2, 7], [2, 9], [20, 11], [20, 13], [20, 15], [20, 17], [20, 19], [20, 1], [20, 3], [20, 5], [20, 7], [20, 9], [3, 0], [3, 10], [3, 12], [3, 14], [3, 16], [3, 18], [3, 20], [3, 2], [3, 4], [3, 6], [3, 8], [4, 11], [4, 13], [4, 15], [4, 17], [4, 19], [4, 1], [4, 3], [4, 5], [4, 7], [4, 9], [5, 0], [5, 10], [5, 12], [5, 14], [5, 16], [5, 18], [5, 20], [5, 2], [5, 4], [5, 6], [5, 8], [6, 11], [6, 13], [6, 15], [6, 17], [6, 19], [6, 1], [6, 3], [6, 5], [6, 7], [6, 9], [7, 0], [7, 10], [7, 12], [7, 14], [7, 16], [7, 18], [7, 20], [7, 2], [7, 4], [7, 6], [7, 8], [8, 11], [8, 13], [8, 15], [8, 17], [8, 19], [8, 1], [8, 3], [8, 5], [8, 7], [8, 9], [9, 0], [9, 10], [9, 12], [9, 14], [9, 16], [9, 18], [9, 20], [9, 2], [9, 4], [9, 6], [9, 8]],\n            boosts: [[0, 10], [1, 15], [1, 3], [14, 14], [14, 20], [15, 7], [20, 10], [20, 18], [3, 19], [5, 7], [7, 3], [8, 12], [8, 18]],\n        },\n        // 18\n        {\n            scale: 25,\n            start: [1, 23],\n            end: [23, 1],\n            bites: 5,\n            walls: [[0, 0], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], [0, 16], [0, 17], [0, 18], [0, 19], [0, 1], [0, 20], [0, 21], [0, 22], [0, 23], [0, 24], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 12], [1, 14], [1, 18], [1, 22], [1, 24], [1, 2], [1, 6], [1, 9], [10, 0], [10, 10], [10, 11], [10, 12], [10, 14], [10, 16], [10, 17], [10, 18], [10, 19], [10, 20], [10, 22], [10, 24], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [11, 0], [11, 10], [11, 12], [11, 14], [11, 16], [11, 18], [11, 20], [11, 22], [11, 23], [11, 24], [11, 2], [11, 4], [11, 6], [12, 0], [12, 10], [12, 12], [12, 14], [12, 15], [12, 16], [12, 18], [12, 1], [12, 20], [12, 21], [12, 22], [12, 24], [12, 2], [12, 3], [12, 4], [12, 6], [12, 7], [12, 8], [13, 0], [13, 10], [13, 11], [13, 12], [13, 14], [13, 18], [13, 21], [13, 24], [13, 4], [13, 8], [13, 9], [14, 0], [14, 10], [14, 12], [14, 14], [14, 15], [14, 16], [14, 17], [14, 18], [14, 19], [14, 20], [14, 21], [14, 22], [14, 23], [14, 24], [14, 2], [14, 3], [14, 4], [14, 5], [14, 6], [14, 7], [14, 8], [15, 0], [15, 10], [15, 12], [15, 14], [15, 16], [15, 20], [15, 22], [15, 24], [15, 2], [15, 4], [15, 6], [16, 0], [16, 10], [16, 11], [16, 12], [16, 13], [16, 14], [16, 16], [16, 17], [16, 18], [16, 19], [16, 1], [16, 20], [16, 22], [16, 24], [16, 2], [16, 3], [16, 4], [16, 6], [16, 7], [16, 8], [16, 9], [17, 0], [17, 10], [17, 14], [17, 16], [17, 20], [17, 22], [17, 24], [17, 2], [17, 4], [17, 6], [18, 0], [18, 10], [18, 11], [18, 12], [18, 13], [18, 14], [18, 15], [18, 16], [18, 18], [18, 19], [18, 20], [18, 22], [18, 24], [18, 2], [18, 4], [18, 5], [18, 6], [18, 7], [18, 8], [19, 0], [19, 10], [19, 14], [19, 16], [19, 19], [19, 22], [19, 24], [19, 2], [19, 4], [19, 8], [2, 0], [2, 10], [2, 12], [2, 14], [2, 15], [2, 16], [2, 17], [2, 18], [2, 19], [2, 20], [2, 22], [2, 23], [2, 24], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [20, 0], [20, 10], [20, 11], [20, 12], [20, 13], [20, 14], [20, 16], [20, 17], [20, 18], [20, 19], [20, 21], [20, 22], [20, 23], [20, 24], [20, 2], [20, 3], [20, 4], [20, 6], [20, 7], [20, 8], [20, 9], [21, 0], [21, 10], [21, 14], [21, 17], [21, 21], [21, 24], [21, 2], [21, 4], [21, 5], [21, 6], [21, 8], [22, 0], [22, 10], [22, 11], [22, 12], [22, 13], [22, 14], [22, 15], [22, 16], [22, 17], [22, 18], [22, 19], [22, 1], [22, 20], [22, 21], [22, 22], [22, 24], [22, 2], [22, 4], [22, 6], [22, 8], [23, 0], [23, 11], [23, 14], [23, 17], [23, 21], [23, 24], [23, 4], [23, 8], [24, 0], [24, 10], [24, 11], [24, 12], [24, 13], [24, 14], [24, 15], [24, 16], [24, 17], [24, 18], [24, 19], [24, 1], [24, 20], [24, 21], [24, 22], [24, 23], [24, 24], [24, 2], [24, 3], [24, 4], [24, 5], [24, 6], [24, 7], [24, 8], [24, 9], [3, 0], [3, 10], [3, 12], [3, 16], [3, 19], [3, 22], [3, 24], [3, 2], [3, 4], [3, 8], [4, 0], [4, 10], [4, 11], [4, 12], [4, 13], [4, 14], [4, 15], [4, 16], [4, 17], [4, 18], [4, 19], [4, 20], [4, 21], [4, 22], [4, 24], [4, 2], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [5, 0], [5, 12], [5, 16], [5, 18], [5, 22], [5, 23], [5, 24], [5, 2], [5, 4], [5, 6], [5, 9], [6, 0], [6, 10], [6, 12], [6, 14], [6, 15], [6, 16], [6, 18], [6, 1], [6, 20], [6, 21], [6, 22], [6, 24], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [7, 0], [7, 10], [7, 12], [7, 14], [7, 16], [7, 18], [7, 20], [7, 22], [7, 24], [7, 4], [7, 7], [8, 0], [8, 10], [8, 11], [8, 12], [8, 13], [8, 14], [8, 15], [8, 16], [8, 17], [8, 18], [8, 19], [8, 20], [8, 22], [8, 23], [8, 24], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [9, 0], [9, 14], [9, 16], [9, 1], [9, 20], [9, 21], [9, 22], [9, 24], [9, 2], [9, 6], [9, 8]],\n            boosts: [[15, 19], [23, 20], [3, 11], [7, 3]],\n        },\n    ];\n\n    const musicAudio = setupMusic(music);\n    const clickAudio = setupSoundEffect(click);\n    const eatAudio = setupSoundEffect(eat);\n    const winAudio = setupSoundEffect(win);\n    const storage = setupStorage('april');\n\n    let drawRequested = false;\n    let state: State.Any = { type: 'menu' };\n    let swipeOrigin: [number, number] | undefined = undefined;\n    let usingKeyboard = false;\n    let cornPattern: string | CanvasPattern = CORN_COLOR;\n\n    // Replace the solid color with the pattern once it's loaded.\n    const CORN_IMAGE = new Image();\n    CORN_IMAGE.src = corn;\n    CORN_IMAGE.addEventListener('load', () => (cornPattern = context.createPattern(CORN_IMAGE, 'repeat')!));\n\n    function reset() {\n        if (state.type !== 'play') return;\n        clickAudio.play();\n        loadLevel(state.levelIndex);\n    }\n\n    function undo() {\n        if (state.type !== 'play') return;\n        const { undoHistory, level } = state as State.Play;\n        if (undoHistory.length === 0) return;\n        clickAudio.play();\n        const { position, directionIndex, type } = undoHistory.pop()!;\n        const [dx, dy] = DIRECTIONS[directionIndex];\n        const nextPosition = [position[0] + dx, position[1] + dy] as [number, number];\n\n        if (type === 'wall') {\n            level.walls!.push(nextPosition);\n            ++(state as State.Play).bites;\n        } else {\n            level.boosts!.push(nextPosition);\n            (state as State.Play).bites -= 3;\n        }\n\n        (state as State.Play).position = position;\n        requestDraw();\n        setLevelOverlay();\n    }\n\n    function resetDisabled() {\n        const { undoHistory, position, levelIndex } = state as State.Play;\n        const [startX, startY] = LEVELS[levelIndex].start;\n        return undoHistory.length === 0 && position[0] === startX && position[1] === startY;\n    }\n\n    function setLevelOverlay() {\n        const { levelIndex, level, bites, undoHistory } = state as State.Play;\n        setOverlay(`\n            <div style=\"display: flex; gap: 5px; margin: 2px 0 0 2px; opacity: 0.8\">\n                <button id=\"april-menu-button\" class=\"light\" style=\"background: ${BACKGROUND_COLOR}\">MENU</button>\n                <button id=\"april-undo-button\" class=\"light\" ${undoHistory.length === 0 ? 'disabled' : `style=\"background: ${BACKGROUND_COLOR}\"`}>UNDO${usingKeyboard ? ' (Z)' : ''}</button>\n                <button id=\"april-reset-button\" class=\"light\" ${resetDisabled() ? 'disabled' : `style=\"background: ${BACKGROUND_COLOR}\"`}>RESET${usingKeyboard ? ' (R)' : ''}</button>\n                <button style=\"background: ${BACKGROUND_COLOR}; cursor: unset\">LVL ${levelIndex + 1} &nbsp•&nbsp ${bites}/${level.bites} 🦷</button>\n            </div>\n        `);\n\n        (document.getElementById('april-menu-button') as HTMLButtonElement).addEventListener('click', () => {\n            clickAudio.play();\n            mainMenu();\n        });\n\n        (document.getElementById('april-undo-button') as HTMLButtonElement).addEventListener('click', undo);\n        (document.getElementById('april-reset-button') as HTMLButtonElement).addEventListener('click', reset);\n    }\n\n    function loadLevel(index: number) {\n        state = {\n            type: 'play',\n            levelIndex: index,\n            level: structuredClone(LEVELS[index]),\n            position: structuredClone(LEVELS[index].start),\n            bites: LEVELS[index].bites,\n            undoHistory: [],\n            levelComplete: false,\n        };\n        setLevelOverlay();\n        requestDraw();\n        window.gtag('event', 'level_start', { level_name: `kornivore-${index + 1}` });\n    }\n\n    function mainMenu() {\n        state = { type: 'menu' };\n        const nextLevel = Number(storage.get('nextLevel') || '0');\n\n        setOverlay(`\n            <div class=\"center\" style=\"display: flex; flex-direction: column; align-items: center; gap: 25px\">\n                <img src=\"${logo}\" alt=\"Kornivore\" width=\"300\">\n                <div style=\"display: flex; flex-direction: column; gap: 25px; align-items: center\">\n                    <div style=\"display: flex; gap: 5px; width: 500px; flex-wrap: wrap; justify-content: center\">\n                        ${LEVELS.map((_, index) => `<button class=\"light\" style=\"width: 70px; height: 35px; ${nextLevel === index ? 'border-width: 5px; border-style: dashed; padding: 0' : ''}\" ${nextLevel < index ? 'disabled' : ''}>${index + 1} ${nextLevel > index ? '🏆' : ''}</button>`).join('')}\n                    </div>\n                </div>\n                <button class=\"link\">Kornivore Music Credits</button>\n            </div>\n        `);\n\n        overlay.querySelectorAll('button').forEach(button =>\n            button.addEventListener('click', () => {\n                clickAudio.play();\n\n                if (button.textContent === 'Kornivore Music Credits') {\n                    setOverlay(`\n                        <div class=\"center\" style=\"display: flex; flex-direction: column; align-items: center; gap: 25px\">\n                            <h1>Kornivore Music Credits</h1>\n                            <table>\n                                <tbody>\n                                    <tr>\n                                        <td><a href=\"https://instagram.com/arieschtruth\" target=\"_blank\" onclick=\"gtag('event', 'visit_external', {url: 'https://instagram.com/arieschtruth'})\">Ari Eschtruth</a></td>\n                                        <td>-</td>\n                                        <td>Composer, Producer</td>\n                                    </tr>\n                                    <tr>\n                                        <td><a href=\"https://instagram.com/alex_golden_sax\" target=\"_blank\" onclick=\"gtag('event', 'visit_external', {url: 'https://instagram.com/alex_golden_sax'})\">Alex Golden</a></td>\n                                        <td>-</td>\n                                        <td>Tenor Saxophone</td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                            <button id=\"april-back-button\">BACK</button>\n                        </div>\n                    `);\n\n                    (document.getElementById('april-back-button') as HTMLButtonElement).addEventListener(\n                        'click',\n                        () => {\n                            clickAudio.play();\n                            mainMenu();\n                        },\n                    );\n\n                    return;\n                }\n\n                loadLevel(parseInt(button.textContent!) - 1);\n            }),\n        );\n\n        requestDraw();\n    }\n\n    function requestDraw() {\n        if (drawRequested) return;\n        requestAnimationFrame(() => {\n            drawRequested = false;\n            draw();\n        });\n    }\n\n    function draw() {\n        context.fillStyle = BACKGROUND_COLOR;\n        context.fillRect(0, 0, canvas.width, canvas.height);\n\n        if (state.type !== 'play') return;\n\n        const { level, position } = state;\n\n        const scale = canvas.width / level.scale;\n\n        const walls = level.walls || [];\n        for (const [x, y] of walls) {\n            context.fillStyle = CORN_COLOR;\n            context.fillRect(x * scale, y * scale, scale * 1.02, scale * 1.02);\n            context.fillStyle = cornPattern;\n            context.fillRect(x * scale, y * scale, scale * 1.02, scale * 1.02);\n        }\n\n        context.strokeStyle = PLAYER_COLOR;\n        context.beginPath();\n        context.arc((level.start[0] + 0.5) * scale, (level.start[1] + 0.5) * scale, 0.35 * scale, 0, Math.PI * 2);\n        context.stroke();\n\n        context.scale(scale, scale);\n\n        context.fillStyle = END_COLOR;\n        context.translate(level.end[0] + 0.5, level.end[1] + 0.5);\n        context.rotate(Math.PI / 4);\n        const size = Math.cos(Math.PI / 4);\n        context.fillRect(size / -2, size / -2, size, size);\n        context.rotate(-Math.PI / 4);\n        context.translate(-level.end[0] - 0.5, -level.end[1] - 0.5);\n\n        context.resetTransform();\n\n        context.fillStyle = BOOST_COLOR;\n        const walls = level.walls || [];\n        for (const [x, y] of boosts) {\n            context.beginPath();\n            context.arc((x + 0.5) * scale, (y + 0.5) * scale, scale * 0.4, 0, Math.PI * 2);\n            context.fill();\n        }\n\n        context.fillStyle = UI_WHITE;\n        context.font = `${scale * 0.2}px ${FONT}`;\n        const boosts = level.boosts || [];\n        for (const [x, y] of boosts) {\n            context.fillText('+3🦷', (x + 0.5) * scale, (y + 0.52) * scale);\n        }\n\n        context.font = `18px ${FONT}`;\n        const texts = level.texts || [];\n        for (const [x, y] of texts) {\n            context.fillText(text, x, y);\n        }\n\n        context.fillStyle = PLAYER_COLOR;\n        context.beginPath();\n        context.arc((position[0] + 0.5) * scale, (position[1] + 0.5) * scale, 0.3 * scale, 0, Math.PI * 2);\n        context.fill();\n    }\n\n    function move(directionIndex: number) {\n        const { levelIndex, level, position, bites, undoHistory } = state as State.Play;\n\n        const [x, y] = position;\n        const [dx, dy] = DIRECTIONS[directionIndex];\n        const [nx, ny] = [x + dx, y + dy];\n\n        if (nx < 0 || ny < 0 || nx >= level.scale || ny >= level.scale) return;\n\n        const hasWall = level.walls && level.walls.some(([wx, wy]) => wx === nx && wy === ny) || false;\n        if (hasWall) {\n            if (bites === 0) return;\n            eatAudio.currentTime = 0;\n            eatAudio.play();\n            level.walls!.splice(\n                level.walls!.findIndex(([wx, wy]) => wx === nx && wy === ny),\n                1,\n            );\n            --(state as State.Play).bites;\n        }\n\n        const hasBoost = (level.boosts && level.boosts.some(([wx, wy]) => wx === nx && wy === ny)) || false;\n        if (hasBoost) {\n            eatAudio.currentTime = 0;\n            eatAudio.play();\n            level.boosts = level.boosts!.filter(([wx, wy]) => wx !== nx || wy !== ny);\n            (state as State.Play).bites += 3;\n        }\n\n        if (hasWall || hasBoost) undoHistory.push({ position, directionIndex, type: hasBoost ? 'boost' : 'wall' });\n        (state as State.Play).position = [nx, ny];\n        requestDraw();\n        setLevelOverlay();\n\n        if (nx === level.end[0] && ny === level.end[1]) {\n            winAudio.play();\n            (state as State.Play).levelComplete = true;\n            const nextLevel = storage.get('nextLevel');\n            storage.set('nextLevel', Math.min(LEVELS.length, Number(nextLevel) + 1 || 1));\n\n            setOverlay(`\n                <div class=\"center\">\n                    <div style=\"display: flex; flex-direction: column; gap: 10px; background-color: ${BACKGROUND_COLOR}; border: 1px solid var(--ui-white); padding: 15px; align-items: center\">\n                        Level complete 🏆\n                        <div style=\"display: flex; gap: 5px\">\n                            <button id=\"april-menu-button\" class=\"light\">MENU</button>\n                            ${levelIndex === -1 || levelIndex === LEVELS.length - 1 ? '' : `<button id=\"april-next-button\" class=\"light\">NEXT${usingKeyboard ? ' (SPACE)' : ''}</button>`}\n                        </div>\n                    </div>\n                </div>\n            `);\n\n            window.gtag('event', 'level_end', { level_name: `kornivore-${levelIndex + 1}` });\n\n            (document.getElementById('april-menu-button') as HTMLButtonElement).addEventListener('click', () => {\n                clickAudio.play();\n                mainMenu();\n            });\n\n            const nextButton = document.getElementById('april-next-button');\n            if (nextButton) {\n                nextButton.addEventListener('click', () => {\n                    clickAudio.play();\n                    loadLevel(levelIndex + 1);\n                });\n            }\n    }\n\n    function onKeyDown(event: KeyboardEvent) {\n        usingKeyboard = true;\n\n        if (state.type !== 'play') return;\n\n        if (event.key === ' ') {\n            if (!state.levelComplete || state.levelIndex === LEVELS.length - 1) return;\n            event.preventDefault();\n            clickAudio.play();\n            loadLevel(state.levelIndex + 1);\n            return;\n        }\n\n        if (state.levelComplete) return;\n\n        if (event.key.toLowerCase() === 'r' && !resetDisabled()) {\n            reset();\n            return;\n        }\n\n        if (event.key.toLowerCase() === 'z') {\n            undo();\n            return;\n        }\n\n        const index = ALTERNATE_KEYS.includes(event.key.toLowerCase())\n            ? ALTERNATE_KEYS.indexOf(event.key.toLowerCase())\n            : KEYS.indexOf(event.key);\n        if (index === -1) return;\n\n        event.preventDefault();\n        move(index);\n    }\n\n    function onTouchStart(event: TouchEvent) {\n        usingKeyboard = false;\n        swipeOrigin = [event.touches[0].clientX, event.touches[0].clientY];\n    }\n\n    function onTouchEnd() {\n        swipeOrigin = undefined;\n    }\n\n    function onTouchMove(event: TouchEvent) {\n        if (swipeOrigin === undefined) return;\n        const { clientY, clientX } = event.touches[0];\n        if (distance(clientX, clientY, swipeOrigin[0], swipeOrigin[1]) > SWIPE_RADIUS) {\n            const dx = clientX - swipeOrigin[0];\n            const dy = clientY - swipeOrigin[1];\n            if (Math.abs(dx) > Math.abs(dy)) move(dx > 0 ? 1 : 3);\n            else move(dy > 0 ? 2 : 0);\n            swipeOrigin = undefined;\n        }\n    }\n\n    mainMenu();\n    requestDraw();\n\n    context.lineWidth = 3;\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n    musicAudio.play();\n    document.addEventListener('keydown', onKeyDown);\n    document.addEventListener('touchstart', onTouchStart);\n    document.addEventListener('touchmove', onTouchMove);\n    document.addEventListener('touchend', onTouchEnd);\n    return () => {\n        musicAudio.pause();\n        document.removeEventListener('keydown', onKeyDown);\n        document.removeEventListener('touchstart', onTouchStart);\n        document.removeEventListener('touchmove', onTouchMove);\n        document.removeEventListener('touchend', onTouchEnd);\n    };\n}","README.md":" ","assets.json":"","main.py":"\n","pxt.json":"{\n    \"name\": \"corn\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[{"id":"04078-57968-98897-32564","timestamp":1749736386640}],"lastSaveTime":1749738996508}