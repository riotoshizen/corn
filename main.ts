const click = Assets.click;
const corn = Assets.corn;
const eat = Assets.eat;
const logo = Assets.logo;
const music = Assets.music;
const win = Assets.win;

interface Level {
    scale: number;
    start: [number, number];
    end: [number, number];
    bites: number;
    walls?: [number, number][];
    texts?: { x: number; y: number; text: string }[];
    boosts?: [number, number][];
}

namespace State {
    export interface Menu {
        type: 'menu';
    }

    export interface Play {
        type: 'play';
        levelIndex: number;
        level: Level;
        position: [number, number];
        bites: number;
        undoHistory: { position: [number, number]; directionIndex: number; type: 'wall' | 'boost' }[];
        levelComplete: boolean;
    }

    export type Any = Menu | Play;
}

import { april, may } from './path/to/myModule';

april();
may();

    const BACKGROUND_COLOR = '#0a3209';
    const BOOST_COLOR = '#0077ff';
    const CORN_COLOR = '#d5b803';
    const END_COLOR = '#64e364';
    const PLAYER_COLOR = '#c83c27';

    const KEYS = ['ArrowUp', 'ArrowRight', 'ArrowDown', 'ArrowLeft'];
    const ALTERNATE_KEYS = ['w', 'd', 's', 'a'];
    const DIRECTIONS = [
        [0, -1],
        [1, 0],
        [0, 1],
        [-1, 0],
    ];
    const SWIPE_RADIUS = 50;

    // prettier-ignore
    const LEVELS: Level[] = [
        // 1
        {
            scale: 9,
            start: [2, 2],
            end: [6, 6],
            bites: 0,
            texts: [
                { x: 300, y: 300, text: 'WASD/arrow keys/swipe to move' },
                { x: 252, y: 168, text: '← Start here' },
                { x: 348, y: 433, text: 'Go here →' },
            ],
        },
        // 2
        {
            scale: 11,
            start: [1, 9],
            end: [9, 1],
            bites: 0,
            texts: [{ x: 300, y: 300, text: 'Solve the corn maze' }],
            walls: [[0, 0], [0, 10], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 10], [10, 0], [10, 10], [10, 1], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [2, 0], [2, 10], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 8], [2, 9], [3, 0], [3, 10], [3, 2], [3, 6], [4, 0], [4, 10], [4, 1], [4, 2], [4, 4], [4, 6], [4, 7], [4, 8], [5, 0], [5, 10], [5, 4], [6, 0], [6, 10], [6, 2], [6, 3], [6, 4], [6, 6], [6, 7], [6, 8], [7, 0], [7, 10], [7, 2], [7, 6], [7, 8], [8, 0], [8, 10], [8, 2], [8, 4], [8, 5], [8, 6], [8, 8], [9, 0], [9, 10], [9, 2], [9, 6]],
        },
        // 3
        {
            scale: 11,
            start: [2, 5],
            end: [8, 5],
            bites: 1,
            walls: [[0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [2, 3], [2, 4], [2, 6], [2, 7], [3, 3], [3, 4], [3, 6], [3, 7], [4, 3], [4, 4], [4, 6], [4, 7], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [6, 3], [6, 4], [6, 6], [6, 7], [7, 3], [7, 4], [7, 6], [7, 7], [8, 3], [8, 4], [8, 6], [8, 7], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7]],
            texts: [
                { x: 451, y: 55, text: '↑ You can eat this many walls' },
                { x: 360, y: 300, text: '← Eat' },
            ],
        },
        // 4
        {
            scale: 11,
            start: [2, 5],
            end: [8, 5],
            bites: 2,
            walls: [[1, 4], [1, 5], [1, 6], [2, 4], [2, 6], [3, 4], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6], [6, 4], [6, 5], [6, 6], [7, 4], [7, 6], [8, 4], [8, 6], [9, 4], [9, 5], [9, 6]],
        },
        // 5
        {
            scale: 11,
            start: [1, 1],
            end: [9, 9],
            bites: 11,
            walls: [[0, 0], [0, 10], [0, 1], [0, 2], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 10], [1, 2], [1, 3], [1, 4], [1, 5], [1, 7], [1, 8], [10, 10], [10, 1], [10, 2], [10, 3], [10, 5], [10, 6], [10, 8], [10, 9], [2, 0], [2, 10], [2, 1], [2, 2], [2, 3], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [3, 0], [3, 10], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 0], [4, 1], [4, 3], [4, 4], [4, 5], [4, 6], [4, 8], [4, 9], [5, 0], [5, 10], [5, 1], [5, 2], [5, 3], [5, 5], [5, 6], [5, 7], [5, 8], [5, 9], [6, 10], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [7, 0], [7, 10], [7, 1], [7, 2], [7, 3], [7, 4], [7, 6], [7, 7], [7, 8], [8, 0], [8, 10], [8, 1], [8, 3], [8, 4], [8, 5], [8, 6], [8, 8], [8, 9], [9, 0], [9, 10], [9, 1], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8]],
        },
        // 6
        {
            scale: 11,
            start: [9, 1],
            end: [1, 9],
            bites: 6,
            walls: [[0, 0], [0, 10], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 10], [1, 2], [1, 4], [1, 6], [1, 8], [10, 0], [10, 1], [10, 2], [10, 3], [10, 4], [2, 0], [2, 10], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [3, 0], [3, 10], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 0], [4, 10], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [5, 0], [5, 2], [5, 3], [5, 4], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [7, 0], [7, 2], [7, 3], [7, 4], [8, 0], [8, 2], [8, 3], [8, 4], [9, 0], [9, 2], [9, 3], [9, 4]],
        },
        // 7
        {
            scale: 15,
            start: [2, 2],
            end: [12, 12],
            bites: 3,
            walls: [[0, 0], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 12], [1, 13], [1, 14], [1, 4], [1, 7], [10, 0], [10, 10], [10, 11], [10, 12], [10, 13], [10, 14], [10, 2], [10, 4], [10, 6], [10, 7], [10, 8], [10, 9], [11, 0], [11, 10], [11, 14], [11, 2], [11, 4], [11, 6], [12, 0], [12, 10], [12, 14], [12, 2], [12, 4], [12, 5], [12, 6], [12, 7], [12, 8], [13, 0], [13, 10], [13, 14], [13, 4], [13, 8], [14, 0], [14, 10], [14, 11], [14, 12], [14, 13], [14, 14], [14, 1], [14, 2], [14, 3], [14, 4], [14, 5], [14, 6], [14, 7], [14, 8], [14, 9], [2, 0], [2, 10], [2, 14], [2, 6], [2, 7], [2, 8], [2, 9], [3, 0], [3, 10], [3, 11], [3, 12], [3, 14], [3, 4], [3, 5], [3, 6], [4, 0], [4, 10], [4, 12], [4, 13], [4, 14], [4, 1], [4, 3], [4, 4], [4, 6], [4, 7], [4, 8], [5, 0], [5, 10], [5, 12], [5, 14], [5, 3], [5, 8], [5, 9], [6, 0], [6, 10], [6, 12], [6, 14], [6, 2], [6, 3], [6, 5], [6, 6], [6, 7], [6, 8], [7, 0], [7, 10], [7, 12], [7, 14], [7, 1], [7, 2], [7, 5], [7, 8], [8, 0], [8, 10], [8, 11], [8, 12], [8, 14], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [9, 0], [9, 12], [9, 14], [9, 2], [9, 4], [9, 6]],
        },
        // 8
        {
            scale: 16,
            start: [6, 8],
            end: [9, 8],
            bites: 1,
            walls: [[0, 0], [0, 14], [0, 15], [0, 1], [0, 7], [1, 0], [1, 10], [1, 11], [1, 12], [1, 14], [1, 15], [1, 1], [1, 2], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [10, 0], [10, 10], [10, 11], [10, 15], [10, 2], [10, 4], [10, 5], [11, 10], [11, 11], [11, 13], [11, 15], [11, 2], [11, 4], [11, 5], [11, 6], [11, 7], [12, 10], [12, 13], [12, 15], [12, 1], [12, 2], [12, 4], [12, 5], [12, 6], [12, 7], [12, 8], [12, 9], [13, 10], [13, 11], [13, 12], [13, 13], [13, 4], [13, 8], [13, 9], [14, 0], [14, 13], [14, 15], [14, 2], [14, 6], [15, 0], [15, 10], [15, 11], [15, 15], [15, 1], [15, 2], [15, 3], [15, 5], [15, 6], [15, 7], [15, 8], [2, 0], [2, 11], [2, 15], [2, 1], [2, 2], [2, 4], [2, 5], [3, 0], [3, 11], [3, 13], [3, 15], [3, 1], [3, 5], [3, 7], [3, 8], [3, 9], [4, 0], [4, 13], [4, 1], [4, 3], [4, 4], [4, 5], [4, 9], [5, 0], [5, 10], [5, 11], [5, 12], [5, 13], [5, 15], [5, 1], [5, 4], [5, 5], [5, 6], [5, 7], [5, 9], [6, 0], [6, 15], [6, 1], [6, 2], [6, 7], [6, 9], [7, 0], [7, 11], [7, 12], [7, 13], [7, 15], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [7, 9], [8, 0], [8, 10], [8, 11], [8, 15], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [9, 0], [9, 10], [9, 11], [9, 13], [9, 14], [9, 15], [9, 2], [9, 4], [9, 9]],
        },
        // 9
        {
            scale: 21,
            start: [1, 9],
            end: [19, 13],
            bites: 7,
            walls: [[0, 0], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], [0, 16], [0, 17], [0, 18], [0, 19], [0, 1], [0, 20], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 13], [1, 14], [1, 15], [1, 16], [1, 17], [1, 18], [1, 19], [1, 1], [1, 20], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [10, 0], [10, 10], [10, 11], [10, 12], [10, 13], [10, 14], [10, 15], [10, 16], [10, 17], [10, 18], [10, 19], [10, 1], [10, 20], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [11, 0], [11, 14], [11, 15], [11, 16], [11, 17], [11, 18], [11, 19], [11, 1], [11, 20], [11, 2], [11, 3], [11, 4], [11, 5], [11, 6], [11, 7], [11, 8], [12, 0], [12, 12], [12, 13], [12, 14], [12, 15], [12, 16], [12, 17], [12, 18], [12, 19], [12, 1], [12, 20], [12, 2], [12, 3], [12, 4], [12, 5], [12, 6], [12, 7], [12, 9], [13, 0], [13, 11], [13, 13], [13, 14], [13, 15], [13, 16], [13, 17], [13, 18], [13, 19], [13, 1], [13, 20], [13, 2], [13, 3], [13, 4], [13, 5], [13, 6], [13, 7], [13, 9], [14, 0], [14, 11], [14, 12], [14, 14], [14, 15], [14, 16], [14, 17], [14, 18], [14, 19], [14, 1], [14, 20], [14, 2], [14, 3], [14, 4], [14, 5], [14, 6], [14, 7], [14, 8], [15, 0], [15, 10], [15, 11], [15, 12], [15, 13], [15, 14], [15, 15], [15, 16], [15, 17], [15, 18], [15, 19], [15, 1], [15, 20], [15, 2], [15, 3], [15, 4], [15, 5], [15, 6], [15, 7], [15, 8], [15, 9], [16, 0], [16, 14], [16, 15], [16, 16], [16, 17], [16, 18], [16, 19], [16, 1], [16, 20], [16, 2], [16, 3], [16, 4], [16, 5], [16, 6], [16, 7], [17, 0], [17, 10], [17, 11], [17, 12], [17, 13], [17, 14], [17, 15], [17, 16], [17, 17], [17, 18], [17, 19], [17, 1], [17, 20], [17, 2], [17, 3], [17, 4], [17, 5], [17, 6], [17, 7], [17, 8], [18, 0], [18, 11], [18, 12], [18, 13], [18, 14], [18, 15], [18, 16], [18, 17], [18, 18], [18, 19], [18, 1], [18, 20], [18, 2], [18, 3], [18, 4], [18, 5], [18, 6], [18, 7], [18, 8], [18, 9], [19, 0], [19, 14], [19, 15], [19, 16], [19, 17], [19, 18], [19, 19], [19, 1], [19, 20], [19, 2], [19, 3], [19, 4], [19, 5], [19, 6], [19, 7], [2, 0], [2, 10], [2, 11], [2, 12], [2, 14], [2, 15], [2, 16], [2, 17], [2, 18], [2, 19], [2, 1], [2, 20], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 9], [20, 0], [20, 10], [20, 11], [20, 12], [20, 13], [20, 14], [20, 15], [20, 16], [20, 17], [20, 18], [20, 19], [20, 1], [20, 20], [20, 2], [20, 3], [20, 4], [20, 5], [20, 6], [20, 7], [20, 8], [20, 9], [3, 0], [3, 10], [3, 11], [3, 12], [3, 14], [3, 15], [3, 16], [3, 17], [3, 18], [3, 19], [3, 1], [3, 20], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 9], [4, 0], [4, 10], [4, 11], [4, 12], [4, 14], [4, 15], [4, 16], [4, 17], [4, 18], [4, 19], [4, 1], [4, 20], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 9], [5, 0], [5, 10], [5, 11], [5, 12], [5, 13], [5, 14], [5, 15], [5, 16], [5, 17], [5, 18], [5, 19], [5, 1], [5, 20], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [5, 9], [6, 0], [6, 13], [6, 14], [6, 15], [6, 16], [6, 17], [6, 18], [6, 19], [6, 1], [6, 20], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [7, 0], [7, 10], [7, 11], [7, 12], [7, 14], [7, 15], [7, 16], [7, 17], [7, 18], [7, 19], [7, 1], [7, 20], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 9], [8, 0], [8, 10], [8, 11], [8, 12], [8, 14], [8, 15], [8, 16], [8, 17], [8, 18], [8, 19], [8, 1], [8, 20], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 9], [9, 0], [9, 13], [9, 14], [9, 15], [9, 16], [9, 17], [9, 18], [9, 19], [9, 1], [9, 20], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8]],
        },
        // 10
        {
            scale: 11,
            start: [1, 5],
            end: [9, 5],
            bites: 2,
            walls: [[0, 0], [0, 10], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 10], [10, 0], [10, 10], [10, 1], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [2, 0], [2, 10], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [3, 0], [3, 10], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 0], [4, 10], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [5, 0], [5, 10], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [6, 0], [6, 10], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [7, 0], [7, 10], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [8, 0], [8, 10], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [9, 0], [9, 10], [9, 1], [9, 2], [9, 3], [9, 4], [9, 6], [9, 7], [9, 8]],
            boosts: [[6, 1]],
        },
        // 11
        {
            scale: 15,
            start: [7, 7],
            end: [14, 14],
            bites: 1,
            walls: [[10, 11], [10, 12], [10, 13], [10, 14], [10, 2], [10, 3], [11, 10], [11, 11], [11, 12], [11, 13], [11, 14], [11, 2], [11, 3], [11, 4], [11, 5], [11, 6], [11, 7], [11, 8], [11, 9], [12, 10], [12, 11], [12, 12], [12, 13], [12, 14], [12, 2], [12, 3], [12, 4], [12, 5], [12, 6], [12, 7], [12, 8], [12, 9], [13, 10], [13, 11], [13, 12], [13, 13], [13, 14], [13, 9], [14, 10], [14, 11], [14, 12], [14, 13], [14, 9], [2, 10], [2, 11], [2, 12], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [3, 10], [3, 11], [3, 12], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 11], [4, 12], [4, 2], [4, 3], [5, 11], [5, 12], [5, 2], [5, 3], [5, 5], [5, 6], [5, 8], [5, 9], [6, 11], [6, 12], [6, 2], [6, 3], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [7, 11], [7, 2], [7, 3], [7, 5], [7, 6], [7, 8], [7, 9], [8, 11], [8, 12], [8, 2], [8, 3], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [9, 11], [9, 12], [9, 13], [9, 14], [9, 2], [9, 3], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9]],
            boosts: [[7, 1], [10, 7]],
        },
        // 12
        {
            scale: 15,
            start: [4, 7],
            end: [14, 0],
            bites: 1,
            walls: [[0, 10], [0, 12], [0, 13], [0, 14], [0, 9], [1, 10], [1, 11], [1, 12], [1, 13], [1, 9], [10, 0], [10, 10], [10, 11], [10, 12], [10, 13], [10, 14], [10, 1], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [11, 0], [11, 10], [11, 11], [11, 13], [11, 14], [11, 1], [11, 2], [11, 3], [11, 4], [11, 5], [11, 6], [11, 7], [11, 8], [11, 9], [12, 0], [12, 11], [12, 12], [12, 13], [12, 14], [12, 1], [12, 2], [12, 3], [12, 4], [12, 5], [12, 6], [12, 7], [12, 8], [12, 9], [13, 0], [13, 10], [13, 11], [13, 12], [13, 13], [13, 1], [13, 2], [13, 3], [13, 4], [13, 5], [13, 6], [13, 7], [13, 8], [13, 9], [14, 10], [14, 11], [14, 13], [14, 14], [14, 1], [14, 2], [14, 3], [14, 4], [14, 5], [14, 6], [14, 7], [14, 8], [14, 9], [2, 10], [2, 11], [2, 12], [2, 13], [2, 14], [2, 9], [3, 11], [3, 12], [3, 13], [3, 14], [3, 9], [4, 10], [4, 11], [4, 12], [4, 13], [4, 14], [4, 9], [5, 10], [5, 11], [5, 12], [5, 13], [5, 9], [6, 0], [6, 10], [6, 11], [6, 12], [6, 13], [6, 14], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [7, 0], [7, 10], [7, 12], [7, 13], [7, 14], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [7, 9], [8, 0], [8, 10], [8, 11], [8, 12], [8, 13], [8, 14], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [9, 0], [9, 10], [9, 11], [9, 12], [9, 13], [9, 1], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9]],
            boosts: [[0, 11], [1, 14], [11, 12], [12, 10], [13, 14], [14, 12], [3, 10], [5, 14], [7, 11], [9, 14]],
        },
        // 13
        {
            scale: 21,
            start: [10, 10],
            end: [1, 19],
            bites: 1,
            walls: [[0, 0], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], [0, 1], [0, 20], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 10], [1, 11], [1, 15], [1, 16], [1, 17], [1, 18], [1, 1], [1, 20], [1, 3], [1, 4], [1, 5], [1, 6], [1, 8], [1, 9], [10, 0], [10, 12], [10, 13], [10, 14], [10, 16], [10, 18], [10, 1], [10, 20], [10, 2], [10, 4], [10, 5], [11, 0], [11, 10], [11, 11], [11, 12], [11, 13], [11, 14], [11, 16], [11, 18], [11, 1], [11, 20], [11, 2], [11, 5], [11, 6], [11, 7], [11, 8], [11, 9], [12, 0], [12, 10], [12, 11], [12, 12], [12, 14], [12, 16], [12, 18], [12, 1], [12, 20], [12, 2], [12, 3], [12, 5], [12, 6], [12, 7], [12, 8], [12, 9], [13, 0], [13, 10], [13, 11], [13, 14], [13, 15], [13, 16], [13, 17], [13, 18], [13, 19], [13, 1], [13, 20], [13, 3], [13, 5], [13, 6], [13, 7], [13, 8], [13, 9], [14, 0], [14, 11], [14, 13], [14, 14], [14, 15], [14, 17], [14, 18], [14, 19], [14, 1], [14, 20], [15, 0], [15, 10], [15, 11], [15, 12], [15, 13], [15, 14], [15, 15], [15, 16], [15, 17], [15, 18], [15, 19], [15, 1], [15, 20], [15, 2], [15, 3], [15, 5], [15, 6], [15, 8], [15, 9], [16, 0], [16, 10], [16, 11], [16, 12], [16, 13], [16, 14], [16, 15], [16, 17], [16, 18], [16, 19], [16, 20], [16, 5], [16, 6], [16, 8], [16, 9], [17, 0], [17, 10], [17, 11], [17, 12], [17, 13], [17, 14], [17, 15], [17, 18], [17, 1], [17, 20], [17, 2], [17, 3], [17, 4], [17, 5], [17, 6], [17, 8], [17, 9], [18, 0], [18, 12], [18, 17], [18, 18], [18, 20], [18, 2], [18, 3], [18, 4], [18, 5], [18, 6], [18, 7], [18, 8], [19, 0], [19, 10], [19, 11], [19, 12], [19, 13], [19, 14], [19, 15], [19, 16], [19, 17], [19, 18], [19, 20], [19, 6], [19, 7], [19, 8], [19, 9], [2, 0], [2, 10], [2, 11], [2, 13], [2, 14], [2, 15], [2, 16], [2, 17], [2, 18], [2, 19], [2, 1], [2, 20], [2, 8], [2, 9], [20, 0], [20, 10], [20, 11], [20, 12], [20, 13], [20, 14], [20, 15], [20, 16], [20, 17], [20, 18], [20, 19], [20, 1], [20, 20], [20, 2], [20, 3], [20, 4], [20, 5], [20, 6], [20, 7], [20, 8], [20, 9], [3, 0], [3, 10], [3, 11], [3, 13], [3, 14], [3, 15], [3, 19], [3, 1], [3, 20], [3, 2], [3, 3], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 0], [4, 10], [4, 11], [4, 12], [4, 13], [4, 14], [4, 15], [4, 17], [4, 19], [4, 1], [4, 20], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [5, 0], [5, 10], [5, 11], [5, 15], [5, 16], [5, 17], [5, 18], [5, 19], [5, 1], [5, 20], [5, 2], [5, 3], [5, 5], [5, 9], [6, 0], [6, 10], [6, 11], [6, 12], [6, 13], [6, 14], [6, 15], [6, 16], [6, 17], [6, 18], [6, 19], [6, 1], [6, 20], [6, 2], [6, 5], [6, 6], [6, 7], [6, 9], [7, 0], [7, 10], [7, 11], [7, 12], [7, 13], [7, 18], [7, 1], [7, 20], [7, 2], [7, 4], [7, 5], [7, 9], [8, 0], [8, 10], [8, 11], [8, 12], [8, 13], [8, 14], [8, 15], [8, 16], [8, 17], [8, 18], [8, 1], [8, 20], [8, 2], [8, 4], [8, 5], [8, 7], [8, 8], [8, 9], [9, 0], [9, 10], [9, 12], [9, 13], [9, 14], [9, 18], [9, 1], [9, 20], [9, 2], [9, 4], [9, 5], [9, 7], [9, 8], [9, 9]],
            boosts: [[1, 7], [19, 19], [19, 5], [9, 11]],
        },
        // 14
        {
            scale: 21,
            start: [9, 10],
            end: [11, 10],
            bites: 0,
            walls: [[1, 10], [1, 11], [1, 12], [1, 13], [1, 14], [1, 15], [1, 16], [1, 17], [1, 18], [1, 19], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [10, 10], [10, 11], [10, 12], [10, 13], [10, 14], [10, 15], [10, 17], [10, 19], [10, 2], [10, 4], [10, 6], [10, 7], [10, 8], [10, 9], [11, 11], [11, 12], [11, 13], [11, 14], [11, 15], [11, 17], [11, 19], [11, 2], [11, 4], [11, 6], [11, 7], [11, 8], [11, 9], [12, 10], [12, 11], [12, 12], [12, 13], [12, 14], [12, 15], [12, 19], [12, 2], [12, 4], [12, 6], [12, 7], [12, 8], [12, 9], [13, 10], [13, 11], [13, 12], [13, 13], [13, 14], [13, 15], [13, 16], [13, 17], [13, 19], [13, 2], [13, 4], [13, 6], [13, 7], [13, 8], [13, 9], [14, 10], [14, 11], [14, 12], [14, 13], [14, 14], [14, 19], [14, 2], [14, 4], [14, 6], [14, 7], [14, 8], [14, 9], [15, 10], [15, 11], [15, 12], [15, 13], [15, 14], [15, 16], [15, 17], [15, 19], [15, 2], [15, 4], [15, 6], [15, 7], [15, 8], [15, 9], [16, 11], [16, 16], [16, 17], [16, 19], [16, 2], [16, 4], [16, 9], [17, 11], [17, 12], [17, 13], [17, 14], [17, 17], [17, 19], [17, 4], [17, 5], [17, 6], [17, 7], [17, 8], [17, 9], [18, 14], [18, 15], [18, 16], [18, 17], [18, 19], [18, 2], [19, 10], [19, 11], [19, 12], [19, 13], [19, 14], [19, 15], [19, 16], [19, 17], [19, 18], [19, 19], [19, 2], [19, 3], [19, 4], [19, 5], [19, 6], [19, 7], [19, 8], [19, 9], [2, 19], [2, 2], [2, 9], [3, 11], [3, 12], [3, 13], [3, 15], [3, 17], [3, 19], [3, 2], [3, 4], [3, 6], [3, 7], [3, 9], [4, 11], [4, 13], [4, 15], [4, 17], [4, 19], [4, 2], [4, 4], [4, 6], [4, 7], [4, 9], [5, 11], [5, 13], [5, 15], [5, 17], [5, 19], [5, 2], [5, 4], [5, 6], [5, 7], [6, 11], [6, 15], [6, 17], [6, 18], [6, 19], [6, 2], [6, 4], [6, 6], [6, 9], [7, 11], [7, 12], [7, 13], [7, 14], [7, 15], [7, 19], [7, 2], [7, 3], [7, 4], [7, 6], [7, 8], [7, 9], [8, 11], [8, 12], [8, 13], [8, 14], [8, 15], [8, 17], [8, 18], [8, 19], [8, 2], [8, 6], [8, 8], [8, 9], [9, 11], [9, 12], [9, 13], [9, 14], [9, 15], [9, 17], [9, 2], [9, 3], [9, 4], [9, 6], [9, 9]],
            boosts: [[18, 10]],
        },
        // 15
        {
            scale: 21,
            start: [10, 10],
            end: [0, 18],
            bites: 1,
            walls: [[0, 0], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], [0, 16], [0, 17], [0, 19], [0, 1], [0, 20], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 10], [1, 11], [1, 12], [1, 13], [1, 14], [1, 15], [1, 16], [1, 17], [1, 18], [1, 19], [1, 1], [1, 20], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [10, 0], [10, 11], [10, 12], [10, 13], [10, 14], [10, 15], [10, 16], [10, 17], [10, 18], [10, 19], [10, 1], [10, 20], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [11, 0], [11, 10], [11, 11], [11, 12], [11, 13], [11, 14], [11, 15], [11, 16], [11, 17], [11, 18], [11, 19], [11, 1], [11, 20], [11, 2], [11, 3], [11, 4], [11, 5], [11, 6], [11, 7], [11, 8], [11, 9], [12, 0], [12, 10], [12, 11], [12, 12], [12, 13], [12, 14], [12, 15], [12, 16], [12, 17], [12, 18], [12, 19], [12, 1], [12, 20], [12, 2], [12, 3], [12, 4], [12, 5], [12, 6], [12, 7], [12, 8], [12, 9], [13, 0], [13, 11], [13, 12], [13, 13], [13, 14], [13, 15], [13, 16], [13, 17], [13, 18], [13, 19], [13, 1], [13, 20], [13, 2], [13, 3], [13, 4], [13, 5], [13, 6], [13, 7], [13, 8], [13, 9], [14, 0], [14, 10], [14, 11], [14, 12], [14, 13], [14, 14], [14, 15], [14, 16], [14, 17], [14, 18], [14, 19], [14, 1], [14, 20], [14, 2], [14, 3], [14, 4], [14, 5], [14, 6], [14, 7], [14, 8], [14, 9], [15, 0], [15, 10], [15, 11], [15, 12], [15, 13], [15, 14], [15, 15], [15, 16], [15, 17], [15, 18], [15, 19], [15, 1], [15, 20], [15, 2], [15, 3], [15, 4], [15, 5], [15, 6], [15, 7], [15, 8], [15, 9], [16, 0], [16, 10], [16, 11], [16, 12], [16, 13], [16, 14], [16, 15], [16, 16], [16, 17], [16, 18], [16, 19], [16, 1], [16, 20], [16, 2], [16, 3], [16, 4], [16, 5], [16, 6], [16, 7], [16, 8], [16, 9], [17, 0], [17, 10], [17, 11], [17, 12], [17, 13], [17, 14], [17, 15], [17, 16], [17, 17], [17, 18], [17, 19], [17, 1], [17, 20], [17, 2], [17, 3], [17, 4], [17, 5], [17, 6], [17, 7], [17, 8], [17, 9], [18, 0], [18, 10], [18, 11], [18, 12], [18, 13], [18, 14], [18, 15], [18, 16], [18, 17], [18, 18], [18, 19], [18, 1], [18, 20], [18, 2], [18, 3], [18, 4], [18, 5], [18, 6], [18, 7], [18, 8], [18, 9], [19, 0], [19, 10], [19, 11], [19, 12], [19, 13], [19, 14], [19, 15], [19, 16], [19, 17], [19, 18], [19, 19], [19, 1], [19, 20], [19, 2], [19, 3], [19, 4], [19, 5], [19, 6], [19, 7], [19, 8], [19, 9], [2, 0], [2, 11], [2, 12], [2, 13], [2, 14], [2, 15], [2, 16], [2, 17], [2, 18], [2, 19], [2, 1], [2, 20], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [20, 0], [20, 12], [20, 13], [20, 14], [20, 15], [20, 16], [20, 17], [20, 18], [20, 19], [20, 1], [20, 20], [20, 2], [20, 3], [20, 4], [20, 5], [20, 6], [20, 7], [20, 8], [3, 0], [3, 11], [3, 12], [3, 13], [3, 14], [3, 15], [3, 16], [3, 17], [3, 18], [3, 19], [3, 1], [3, 20], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 0], [4, 10], [4, 11], [4, 12], [4, 13], [4, 14], [4, 15], [4, 16], [4, 17], [4, 18], [4, 19], [4, 1], [4, 20], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [5, 0], [5, 10], [5, 11], [5, 12], [5, 13], [5, 14], [5, 15], [5, 16], [5, 17], [5, 18], [5, 19], [5, 1], [5, 20], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [5, 9], [6, 0], [6, 10], [6, 11], [6, 12], [6, 13], [6, 14], [6, 15], [6, 16], [6, 17], [6, 18], [6, 19], [6, 1], [6, 20], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [7, 0], [7, 10], [7, 11], [7, 12], [7, 13], [7, 14], [7, 15], [7, 16], [7, 17], [7, 18], [7, 19], [7, 1], [7, 20], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [7, 9], [8, 0], [8, 11], [8, 12], [8, 13], [8, 14], [8, 15], [8, 16], [8, 17], [8, 18], [8, 19], [8, 1], [8, 20], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [9, 0], [9, 10], [9, 11], [9, 12], [9, 13], [9, 14], [9, 15], [9, 16], [9, 17], [9, 18], [9, 19], [9, 1], [9, 20], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9]],
            boosts: [[13, 10], [2, 10], [20, 10], [20, 11], [20, 9], [3, 10], [8, 10]],
        },
        // 16
        {
            scale: 25,
            start: [12, 12],
            end: [24, 24],
            bites: 1,
            walls: [[0, 0], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], [0, 16], [0, 17], [0, 18], [0, 19], [0, 1], [0, 20], [0, 21], [0, 22], [0, 23], [0, 24], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 16], [1, 18], [1, 19], [1, 1], [1, 20], [1, 21], [1, 22], [1, 23], [1, 24], [1, 2], [1, 3], [1, 5], [10, 0], [10, 10], [10, 11], [10, 12], [10, 13], [10, 14], [10, 20], [10, 21], [10, 22], [10, 24], [10, 4], [10, 7], [10, 8], [10, 9], [11, 0], [11, 10], [11, 14], [11, 16], [11, 18], [11, 22], [11, 24], [11, 2], [11, 4], [11, 5], [12, 0], [12, 10], [12, 14], [12, 15], [12, 16], [12, 18], [12, 19], [12, 20], [12, 24], [12, 2], [12, 5], [12, 7], [12, 8], [12, 9], [13, 0], [13, 10], [13, 14], [13, 1], [13, 20], [13, 21], [13, 22], [13, 23], [13, 24], [13, 2], [13, 3], [13, 4], [13, 5], [13, 7], [14, 0], [14, 10], [14, 11], [14, 12], [14, 13], [14, 14], [14, 16], [14, 17], [14, 18], [14, 19], [14, 1], [14, 20], [14, 24], [14, 7], [14, 9], [15, 0], [15, 12], [15, 1], [15, 22], [15, 24], [15, 3], [15, 4], [15, 5], [15, 6], [15, 7], [16, 0], [16, 10], [16, 11], [16, 12], [16, 14], [16, 15], [16, 16], [16, 17], [16, 18], [16, 1], [16, 20], [16, 21], [16, 22], [16, 24], [16, 6], [16, 9], [17, 0], [17, 14], [17, 18], [17, 1], [17, 22], [17, 23], [17, 24], [17, 3], [17, 4], [17, 5], [17, 6], [17, 7], [17, 9], [18, 0], [18, 11], [18, 12], [18, 13], [18, 14], [18, 16], [18, 17], [18, 18], [18, 1], [18, 20], [18, 22], [18, 23], [18, 24], [18, 3], [18, 7], [18, 8], [18, 9], [19, 0], [19, 11], [19, 14], [19, 18], [19, 19], [19, 20], [19, 21], [19, 22], [19, 23], [19, 24], [19, 3], [19, 5], [19, 8], [2, 0], [2, 10], [2, 11], [2, 12], [2, 13], [2, 14], [2, 18], [2, 1], [2, 23], [2, 24], [2, 3], [2, 5], [2, 7], [2, 8], [2, 9], [20, 0], [20, 11], [20, 13], [20, 14], [20, 16], [20, 1], [20, 20], [20, 21], [20, 22], [20, 23], [20, 24], [20, 3], [20, 5], [20, 6], [20, 8], [20, 9], [21, 0], [21, 11], [21, 16], [21, 17], [21, 18], [21, 19], [21, 1], [21, 20], [21, 21], [21, 22], [21, 23], [21, 24], [21, 3], [21, 6], [22, 0], [22, 10], [22, 11], [22, 13], [22, 14], [22, 19], [22, 1], [22, 20], [22, 21], [22, 22], [22, 23], [22, 24], [22, 3], [22, 5], [22, 6], [22, 7], [22, 8], [22, 9], [23, 0], [23, 14], [23, 15], [23, 16], [23, 17], [23, 18], [23, 19], [23, 1], [23, 20], [23, 21], [23, 22], [23, 23], [23, 24], [23, 2], [23, 3], [24, 0], [24, 10], [24, 11], [24, 12], [24, 13], [24, 14], [24, 15], [24, 16], [24, 17], [24, 18], [24, 19], [24, 1], [24, 20], [24, 21], [24, 22], [24, 23], [24, 2], [24, 3], [24, 4], [24, 5], [24, 6], [24, 7], [24, 8], [24, 9], [3, 0], [3, 12], [3, 16], [3, 17], [3, 18], [3, 1], [3, 20], [3, 21], [3, 22], [3, 23], [3, 24], [3, 3], [3, 5], [3, 7], [4, 0], [4, 10], [4, 12], [4, 14], [4, 16], [4, 18], [4, 1], [4, 20], [4, 24], [4, 5], [4, 7], [4, 8], [4, 9], [5, 0], [5, 10], [5, 12], [5, 14], [5, 18], [5, 1], [5, 20], [5, 22], [5, 24], [5, 2], [5, 3], [6, 0], [6, 10], [6, 12], [6, 14], [6, 15], [6, 16], [6, 17], [6, 18], [6, 20], [6, 22], [6, 24], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [7, 0], [7, 10], [7, 12], [7, 20], [7, 22], [7, 24], [7, 2], [7, 3], [8, 0], [8, 10], [8, 12], [8, 13], [8, 14], [8, 15], [8, 16], [8, 17], [8, 18], [8, 19], [8, 20], [8, 22], [8, 24], [8, 2], [8, 5], [8, 6], [8, 7], [8, 8], [9, 0], [9, 10], [9, 16], [9, 18], [9, 22], [9, 24], [9, 2], [9, 4], [9, 5]],
            boosts: [[2, 22], [2, 2], [22, 2]],
        },
        // 17
        {
            scale: 21,
            start: [0, 20],
            end: [20, 0],
            bites: 2,
            walls: [[0, 11], [0, 13], [0, 15], [0, 17], [0, 19], [0, 1], [0, 3], [0, 5], [0, 7], [0, 9], [1, 0], [1, 10], [1, 12], [1, 14], [1, 16], [1, 18], [1, 20], [1, 2], [1, 4], [1, 6], [1, 8], [10, 11], [10, 13], [10, 15], [10, 17], [10, 19], [10, 1], [10, 3], [10, 5], [10, 7], [10, 9], [11, 0], [11, 10], [11, 12], [11, 14], [11, 16], [11, 18], [11, 20], [11, 2], [11, 4], [11, 6], [11, 8], [12, 11], [12, 13], [12, 15], [12, 17], [12, 19], [12, 1], [12, 3], [12, 5], [12, 7], [12, 9], [13, 0], [13, 10], [13, 12], [13, 14], [13, 16], [13, 18], [13, 20], [13, 2], [13, 4], [13, 6], [13, 8], [14, 11], [14, 13], [14, 15], [14, 17], [14, 19], [14, 1], [14, 3], [14, 5], [14, 7], [14, 9], [15, 0], [15, 10], [15, 12], [15, 14], [15, 16], [15, 18], [15, 20], [15, 2], [15, 4], [15, 6], [15, 8], [16, 11], [16, 13], [16, 15], [16, 17], [16, 19], [16, 1], [16, 3], [16, 5], [16, 7], [16, 9], [17, 0], [17, 10], [17, 12], [17, 14], [17, 16], [17, 18], [17, 20], [17, 2], [17, 4], [17, 6], [17, 8], [18, 11], [18, 13], [18, 15], [18, 17], [18, 19], [18, 1], [18, 3], [18, 5], [18, 7], [18, 9], [19, 0], [19, 10], [19, 12], [19, 14], [19, 16], [19, 18], [19, 20], [19, 2], [19, 4], [19, 6], [19, 8], [2, 11], [2, 13], [2, 15], [2, 17], [2, 19], [2, 1], [2, 3], [2, 5], [2, 7], [2, 9], [20, 11], [20, 13], [20, 15], [20, 17], [20, 19], [20, 1], [20, 3], [20, 5], [20, 7], [20, 9], [3, 0], [3, 10], [3, 12], [3, 14], [3, 16], [3, 18], [3, 20], [3, 2], [3, 4], [3, 6], [3, 8], [4, 11], [4, 13], [4, 15], [4, 17], [4, 19], [4, 1], [4, 3], [4, 5], [4, 7], [4, 9], [5, 0], [5, 10], [5, 12], [5, 14], [5, 16], [5, 18], [5, 20], [5, 2], [5, 4], [5, 6], [5, 8], [6, 11], [6, 13], [6, 15], [6, 17], [6, 19], [6, 1], [6, 3], [6, 5], [6, 7], [6, 9], [7, 0], [7, 10], [7, 12], [7, 14], [7, 16], [7, 18], [7, 20], [7, 2], [7, 4], [7, 6], [7, 8], [8, 11], [8, 13], [8, 15], [8, 17], [8, 19], [8, 1], [8, 3], [8, 5], [8, 7], [8, 9], [9, 0], [9, 10], [9, 12], [9, 14], [9, 16], [9, 18], [9, 20], [9, 2], [9, 4], [9, 6], [9, 8]],
            boosts: [[0, 10], [1, 15], [1, 3], [14, 14], [14, 20], [15, 7], [20, 10], [20, 18], [3, 19], [5, 7], [7, 3], [8, 12], [8, 18]],
        },
        // 18
        {
            scale: 25,
            start: [1, 23],
            end: [23, 1],
            bites: 5,
            walls: [[0, 0], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], [0, 16], [0, 17], [0, 18], [0, 19], [0, 1], [0, 20], [0, 21], [0, 22], [0, 23], [0, 24], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 12], [1, 14], [1, 18], [1, 22], [1, 24], [1, 2], [1, 6], [1, 9], [10, 0], [10, 10], [10, 11], [10, 12], [10, 14], [10, 16], [10, 17], [10, 18], [10, 19], [10, 20], [10, 22], [10, 24], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [11, 0], [11, 10], [11, 12], [11, 14], [11, 16], [11, 18], [11, 20], [11, 22], [11, 23], [11, 24], [11, 2], [11, 4], [11, 6], [12, 0], [12, 10], [12, 12], [12, 14], [12, 15], [12, 16], [12, 18], [12, 1], [12, 20], [12, 21], [12, 22], [12, 24], [12, 2], [12, 3], [12, 4], [12, 6], [12, 7], [12, 8], [13, 0], [13, 10], [13, 11], [13, 12], [13, 14], [13, 18], [13, 21], [13, 24], [13, 4], [13, 8], [13, 9], [14, 0], [14, 10], [14, 12], [14, 14], [14, 15], [14, 16], [14, 17], [14, 18], [14, 19], [14, 20], [14, 21], [14, 22], [14, 23], [14, 24], [14, 2], [14, 3], [14, 4], [14, 5], [14, 6], [14, 7], [14, 8], [15, 0], [15, 10], [15, 12], [15, 14], [15, 16], [15, 20], [15, 22], [15, 24], [15, 2], [15, 4], [15, 6], [16, 0], [16, 10], [16, 11], [16, 12], [16, 13], [16, 14], [16, 16], [16, 17], [16, 18], [16, 19], [16, 1], [16, 20], [16, 22], [16, 24], [16, 2], [16, 3], [16, 4], [16, 6], [16, 7], [16, 8], [16, 9], [17, 0], [17, 10], [17, 14], [17, 16], [17, 20], [17, 22], [17, 24], [17, 2], [17, 4], [17, 6], [18, 0], [18, 10], [18, 11], [18, 12], [18, 13], [18, 14], [18, 15], [18, 16], [18, 18], [18, 19], [18, 20], [18, 22], [18, 24], [18, 2], [18, 4], [18, 5], [18, 6], [18, 7], [18, 8], [19, 0], [19, 10], [19, 14], [19, 16], [19, 19], [19, 22], [19, 24], [19, 2], [19, 4], [19, 8], [2, 0], [2, 10], [2, 12], [2, 14], [2, 15], [2, 16], [2, 17], [2, 18], [2, 19], [2, 20], [2, 22], [2, 23], [2, 24], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [20, 0], [20, 10], [20, 11], [20, 12], [20, 13], [20, 14], [20, 16], [20, 17], [20, 18], [20, 19], [20, 21], [20, 22], [20, 23], [20, 24], [20, 2], [20, 3], [20, 4], [20, 6], [20, 7], [20, 8], [20, 9], [21, 0], [21, 10], [21, 14], [21, 17], [21, 21], [21, 24], [21, 2], [21, 4], [21, 5], [21, 6], [21, 8], [22, 0], [22, 10], [22, 11], [22, 12], [22, 13], [22, 14], [22, 15], [22, 16], [22, 17], [22, 18], [22, 19], [22, 1], [22, 20], [22, 21], [22, 22], [22, 24], [22, 2], [22, 4], [22, 6], [22, 8], [23, 0], [23, 11], [23, 14], [23, 17], [23, 21], [23, 24], [23, 4], [23, 8], [24, 0], [24, 10], [24, 11], [24, 12], [24, 13], [24, 14], [24, 15], [24, 16], [24, 17], [24, 18], [24, 19], [24, 1], [24, 20], [24, 21], [24, 22], [24, 23], [24, 24], [24, 2], [24, 3], [24, 4], [24, 5], [24, 6], [24, 7], [24, 8], [24, 9], [3, 0], [3, 10], [3, 12], [3, 16], [3, 19], [3, 22], [3, 24], [3, 2], [3, 4], [3, 8], [4, 0], [4, 10], [4, 11], [4, 12], [4, 13], [4, 14], [4, 15], [4, 16], [4, 17], [4, 18], [4, 19], [4, 20], [4, 21], [4, 22], [4, 24], [4, 2], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [5, 0], [5, 12], [5, 16], [5, 18], [5, 22], [5, 23], [5, 24], [5, 2], [5, 4], [5, 6], [5, 9], [6, 0], [6, 10], [6, 12], [6, 14], [6, 15], [6, 16], [6, 18], [6, 1], [6, 20], [6, 21], [6, 22], [6, 24], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [7, 0], [7, 10], [7, 12], [7, 14], [7, 16], [7, 18], [7, 20], [7, 22], [7, 24], [7, 4], [7, 7], [8, 0], [8, 10], [8, 11], [8, 12], [8, 13], [8, 14], [8, 15], [8, 16], [8, 17], [8, 18], [8, 19], [8, 20], [8, 22], [8, 23], [8, 24], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [9, 0], [9, 14], [9, 16], [9, 1], [9, 20], [9, 21], [9, 22], [9, 24], [9, 2], [9, 6], [9, 8]],
            boosts: [[15, 19], [23, 20], [3, 11], [7, 3]],
        },
    ];

    const musicAudio = setupMusic(music);
    const clickAudio = setupSoundEffect(click);
    const eatAudio = setupSoundEffect(eat);
    const winAudio = setupSoundEffect(win);
    const storage = setupStorage('april');

    let drawRequested = false;
    let state: State.Any = { type: 'menu' };
    let swipeOrigin: [number, number] | undefined = undefined;
    let usingKeyboard = false;
    let cornPattern: string | CanvasPattern = CORN_COLOR;

    // Replace the solid color with the pattern once it's loaded.
    const CORN_IMAGE = new Image();
    CORN_IMAGE.src = corn;
    CORN_IMAGE.addEventListener('load', () => (cornPattern = context.createPattern(CORN_IMAGE, 'repeat')!));

    function reset() {
        if (state.type !== 'play') return;
        clickAudio.play();
        loadLevel(state.levelIndex);
    }

    function undo() {
        if (state.type !== 'play') return;
        const { undoHistory, level } = state as State.Play;
        if (undoHistory.length === 0) return;
        clickAudio.play();
        const { position, directionIndex, type } = undoHistory.pop()!;
        const [dx, dy] = DIRECTIONS[directionIndex];
        const nextPosition = [position[0] + dx, position[1] + dy] as [number, number];

        if (type === 'wall') {
            level.walls!.push(nextPosition);
            ++(state as State.Play).bites;
        } else {
            level.boosts!.push(nextPosition);
            (state as State.Play).bites -= 3;
        }

        (state as State.Play).position = position;
        requestDraw();
        setLevelOverlay();
    }

    function resetDisabled() {
        const { undoHistory, position, levelIndex } = state as State.Play;
        const [startX, startY] = LEVELS[levelIndex].start;
        return undoHistory.length === 0 && position[0] === startX && position[1] === startY;
    }

    function setLevelOverlay() {
        const { levelIndex, level, bites, undoHistory } = state as State.Play;
        setOverlay(`
            <div style="display: flex; gap: 5px; margin: 2px 0 0 2px; opacity: 0.8">
                <button id="april-menu-button" class="light" style="background: ${BACKGROUND_COLOR}">MENU</button>
                <button id="april-undo-button" class="light" ${undoHistory.length === 0 ? 'disabled' : `style="background: ${BACKGROUND_COLOR}"`}>UNDO${usingKeyboard ? ' (Z)' : ''}</button>
                <button id="april-reset-button" class="light" ${resetDisabled() ? 'disabled' : `style="background: ${BACKGROUND_COLOR}"`}>RESET${usingKeyboard ? ' (R)' : ''}</button>
                <button style="background: ${BACKGROUND_COLOR}; cursor: unset">LVL ${levelIndex + 1} &nbsp•&nbsp ${bites}/${level.bites} 🦷</button>
            </div>
        `);

        (document.getElementById('april-menu-button') as HTMLButtonElement).addEventListener('click', () => {
            clickAudio.play();
            mainMenu();
        });

        (document.getElementById('april-undo-button') as HTMLButtonElement).addEventListener('click', undo);
        (document.getElementById('april-reset-button') as HTMLButtonElement).addEventListener('click', reset);
    }

    function loadLevel(index: number) {
        state = {
            type: 'play',
            levelIndex: index,
            level: structuredClone(LEVELS[index]),
            position: structuredClone(LEVELS[index].start),
            bites: LEVELS[index].bites,
            undoHistory: [],
            levelComplete: false,
        };
        setLevelOverlay();
        requestDraw();
        window.gtag('event', 'level_start', { level_name: `kornivore-${index + 1}` });
    }

    function mainMenu() {
        state = { type: 'menu' };
        const nextLevel = Number(storage.get('nextLevel') || '0');

        setOverlay(`
            <div class="center" style="display: flex; flex-direction: column; align-items: center; gap: 25px">
                <img src="${logo}" alt="Kornivore" width="300">
                <div style="display: flex; flex-direction: column; gap: 25px; align-items: center">
                    <div style="display: flex; gap: 5px; width: 500px; flex-wrap: wrap; justify-content: center">
                        ${LEVELS.map((_, index) => `<button class="light" style="width: 70px; height: 35px; ${nextLevel === index ? 'border-width: 5px; border-style: dashed; padding: 0' : ''}" ${nextLevel < index ? 'disabled' : ''}>${index + 1} ${nextLevel > index ? '🏆' : ''}</button>`).join('')}
                    </div>
                </div>
                <button class="link">Kornivore Music Credits</button>
            </div>
        `);

        overlay.querySelectorAll('button').forEach(button =>
            button.addEventListener('click', () => {
                clickAudio.play();

                if (button.textContent === 'Kornivore Music Credits') {
                    setOverlay(`
                        <div class="center" style="display: flex; flex-direction: column; align-items: center; gap: 25px">
                            <h1>Kornivore Music Credits</h1>
                            <table>
                                <tbody>
                                    <tr>
                                        <td><a href="https://instagram.com/arieschtruth" target="_blank" onclick="gtag('event', 'visit_external', {url: 'https://instagram.com/arieschtruth'})">Ari Eschtruth</a></td>
                                        <td>-</td>
                                        <td>Composer, Producer</td>
                                    </tr>
                                    <tr>
                                        <td><a href="https://instagram.com/alex_golden_sax" target="_blank" onclick="gtag('event', 'visit_external', {url: 'https://instagram.com/alex_golden_sax'})">Alex Golden</a></td>
                                        <td>-</td>
                                        <td>Tenor Saxophone</td>
                                    </tr>
                                </tbody>
                            </table>
                            <button id="april-back-button">BACK</button>
                        </div>
                    `);

                    (document.getElementById('april-back-button') as HTMLButtonElement).addEventListener(
                        'click',
                        () => {
                            clickAudio.play();
                            mainMenu();
                        },
                    );

                    return;
                }

                loadLevel(parseInt(button.textContent!) - 1);
            }),
        );

        requestDraw();
    }

    function requestDraw() {
        if (drawRequested) return;
        requestAnimationFrame(() => {
            drawRequested = false;
            draw();
        });
    }

    function draw() {
        context.fillStyle = BACKGROUND_COLOR;
        context.fillRect(0, 0, canvas.width, canvas.height);

        if (state.type !== 'play') return;

        const { level, position } = state;

        const scale = canvas.width / level.scale;

        const walls = level.walls || [];
        for (const [x, y] of walls) {
            context.fillStyle = CORN_COLOR;
            context.fillRect(x * scale, y * scale, scale * 1.02, scale * 1.02);
            context.fillStyle = cornPattern;
            context.fillRect(x * scale, y * scale, scale * 1.02, scale * 1.02);
        }

        context.strokeStyle = PLAYER_COLOR;
        context.beginPath();
        context.arc((level.start[0] + 0.5) * scale, (level.start[1] + 0.5) * scale, 0.35 * scale, 0, Math.PI * 2);
        context.stroke();

        context.scale(scale, scale);

        context.fillStyle = END_COLOR;
        context.translate(level.end[0] + 0.5, level.end[1] + 0.5);
        context.rotate(Math.PI / 4);
        const size = Math.cos(Math.PI / 4);
        context.fillRect(size / -2, size / -2, size, size);
        context.rotate(-Math.PI / 4);
        context.translate(-level.end[0] - 0.5, -level.end[1] - 0.5);

        context.resetTransform();

        context.fillStyle = BOOST_COLOR;
        const walls = level.walls || [];
        for (const [x, y] of boosts) {
            context.beginPath();
            context.arc((x + 0.5) * scale, (y + 0.5) * scale, scale * 0.4, 0, Math.PI * 2);
            context.fill();
        }

        context.fillStyle = UI_WHITE;
        context.font = `${scale * 0.2}px ${FONT}`;
        const boosts = level.boosts || [];
        for (const [x, y] of boosts) {
            context.fillText('+3🦷', (x + 0.5) * scale, (y + 0.52) * scale);
        }

        context.font = `18px ${FONT}`;
        const texts = level.texts || [];
        for (const [x, y] of texts) {
            context.fillText(text, x, y);
        }

        context.fillStyle = PLAYER_COLOR;
        context.beginPath();
        context.arc((position[0] + 0.5) * scale, (position[1] + 0.5) * scale, 0.3 * scale, 0, Math.PI * 2);
        context.fill();
    }

    function move(directionIndex: number) {
        const { levelIndex, level, position, bites, undoHistory } = state as State.Play;

        const [x, y] = position;
        const [dx, dy] = DIRECTIONS[directionIndex];
        const [nx, ny] = [x + dx, y + dy];

        if (nx < 0 || ny < 0 || nx >= level.scale || ny >= level.scale) return;

        const hasWall = level.walls && level.walls.some(([wx, wy]) => wx === nx && wy === ny) || false;
        if (hasWall) {
            if (bites === 0) return;
            eatAudio.currentTime = 0;
            eatAudio.play();
            level.walls!.splice(
                level.walls!.findIndex(([wx, wy]) => wx === nx && wy === ny),
                1,
            );
            --(state as State.Play).bites;
        }

        const hasBoost = (level.boosts && level.boosts.some(([wx, wy]) => wx === nx && wy === ny)) || false;
        if (hasBoost) {
            eatAudio.currentTime = 0;
            eatAudio.play();
            level.boosts = level.boosts!.filter(([wx, wy]) => wx !== nx || wy !== ny);
            (state as State.Play).bites += 3;
        }

        if (hasWall || hasBoost) undoHistory.push({ position, directionIndex, type: hasBoost ? 'boost' : 'wall' });
        (state as State.Play).position = [nx, ny];
        requestDraw();
        setLevelOverlay();

        if (nx === level.end[0] && ny === level.end[1]) {
            winAudio.play();
            (state as State.Play).levelComplete = true;
            const nextLevel = storage.get('nextLevel');
            storage.set('nextLevel', Math.min(LEVELS.length, Number(nextLevel) + 1 || 1));

            setOverlay(`
                <div class="center">
                    <div style="display: flex; flex-direction: column; gap: 10px; background-color: ${BACKGROUND_COLOR}; border: 1px solid var(--ui-white); padding: 15px; align-items: center">
                        Level complete 🏆
                        <div style="display: flex; gap: 5px">
                            <button id="april-menu-button" class="light">MENU</button>
                            ${levelIndex === -1 || levelIndex === LEVELS.length - 1 ? '' : `<button id="april-next-button" class="light">NEXT${usingKeyboard ? ' (SPACE)' : ''}</button>`}
                        </div>
                    </div>
                </div>
            `);

            window.gtag('event', 'level_end', { level_name: `kornivore-${levelIndex + 1}` });

            (document.getElementById('april-menu-button') as HTMLButtonElement).addEventListener('click', () => {
                clickAudio.play();
                mainMenu();
            });

            const nextButton = document.getElementById('april-next-button');
            if (nextButton) {
                nextButton.addEventListener('click', () => {
                    clickAudio.play();
                    loadLevel(levelIndex + 1);
                });
            }
    }

    function onKeyDown(event: KeyboardEvent) {
        usingKeyboard = true;

        if (state.type !== 'play') return;

        if (event.key === ' ') {
            if (!state.levelComplete || state.levelIndex === LEVELS.length - 1) return;
            event.preventDefault();
            clickAudio.play();
            loadLevel(state.levelIndex + 1);
            return;
        }

        if (state.levelComplete) return;

        if (event.key.toLowerCase() === 'r' && !resetDisabled()) {
            reset();
            return;
        }

        if (event.key.toLowerCase() === 'z') {
            undo();
            return;
        }

        const index = ALTERNATE_KEYS.includes(event.key.toLowerCase())
            ? ALTERNATE_KEYS.indexOf(event.key.toLowerCase())
            : KEYS.indexOf(event.key);
        if (index === -1) return;

        event.preventDefault();
        move(index);
    }

    function onTouchStart(event: TouchEvent) {
        usingKeyboard = false;
        swipeOrigin = [event.touches[0].clientX, event.touches[0].clientY];
    }

    function onTouchEnd() {
        swipeOrigin = undefined;
    }

    function onTouchMove(event: TouchEvent) {
        if (swipeOrigin === undefined) return;
        const { clientY, clientX } = event.touches[0];
        if (distance(clientX, clientY, swipeOrigin[0], swipeOrigin[1]) > SWIPE_RADIUS) {
            const dx = clientX - swipeOrigin[0];
            const dy = clientY - swipeOrigin[1];
            if (Math.abs(dx) > Math.abs(dy)) move(dx > 0 ? 1 : 3);
            else move(dy > 0 ? 2 : 0);
            swipeOrigin = undefined;
        }
    }

    mainMenu();
    requestDraw();

    context.lineWidth = 3;
    context.textAlign = 'center';
    context.textBaseline = 'middle';
    musicAudio.play();
    document.addEventListener('keydown', onKeyDown);
    document.addEventListener('touchstart', onTouchStart);
    document.addEventListener('touchmove', onTouchMove);
    document.addEventListener('touchend', onTouchEnd);
    return () => {
        musicAudio.pause();
        document.removeEventListener('keydown', onKeyDown);
        document.removeEventListener('touchstart', onTouchStart);
        document.removeEventListener('touchmove', onTouchMove);
        document.removeEventListener('touchend', onTouchEnd);
    };
}